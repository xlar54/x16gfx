
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --m65c02 -m -a -l ./target/x16_demo1.lbl -L ./target/x16_demo1.lst -o ./target/demo1 ./src/x16_demo1.asm
; Wed Jun  5 15:31:19 2024

;Offset	;Hex		;Source

;******  Processing input file: ./src/x16_demo1.asm


;******  Processing file: ./src/x16_regs.asm

=$02			r0	= $02
=$02			r0L	= $02
=$03			r0H	= $03
=$04			r1	= $04
=$04			r1L	= $04
=$05			r1H	= $05
=$06			r2	= $06
=$06			r2L	= $06
=$07			r2H	= $07
=$08			r3	= $08
=$08			r3L	= $08
=$09			r3H	= $09
=$0a			r4	= $0a
=$0a			r4L	= $0a
=$0b			r4H	= $0b
=$0c			r5	= $0c
=$0c			r5L	= $0c
=$0d			r5H	= $0d
=$0e			r6	= $0e
=$0e			r6L	= $0e
=$0f			r6H	= $0f
=$10			r7	= $10
=$10			r7L	= $10
=$11			r7H	= $11
=$12			r8	= $12
=$12			r8L	= $12
=$13			r8H	= $13
=$14			r9	= $14
=$14			r9L	= $14
=$15			r9H	= $15
=$16			r10	= $16
=$16			r10L	= $16
=$17			r10H	= $17
=$18			r11	= $18
=$18			r11L	= $18
=$19			r11H	= $19
=$1a			r12	= $1a
=$1a			r12L	= $1a
=$1b			r12H	= $1b
=$1c			r13	= $1c
=$1c			r13L	= $1c
=$1d			r13H	= $1d
=$1e			r14	= $1e
=$1e			r14L	= $1e
=$1f			r14H	= $1f
=$20			r15	= $20
=$20			r15L	= $20
=$21			r15H	= $21

;******  Return to file: ./src/x16_demo1.asm


;******  Processing file: ./src/x16_vera.asm

=$9f20			VERA_BASE           = $9f20
=$9f20			VERA_ADDRx_L        = $9f20
=$9f21			VERA_ADDRx_M        = $9f21
=$9f22			VERA_ADDRx_H        = $9f22
=$9f23			VERA_DATA0          = $9f23
=$9f24			VERA_DATA1          = $9f24
=$9f25			VERA_CTRL           = $9f25
=$9f26			VERA_IEN            = $9f26
=$9f27			VERA_ISR            = $9f27
=$9f28			VERA_IRQLINE_L      = $9f28 ; write only
=$9f28			VERA_SCANLINE_L     = $9f28 ; read only
=$9f29			VERA_DC_VIDEO       = $9f29     ; Active Display Control
=$9f2a			VERA_DC_HSCALE      = $9f2a     ; Active Display H-Scale
=$9f2b			VERA_DC_VSCALE      = $9f2b     ; Active Display V-Scale
=$9f2c			VERA_DC_BORDER      = $9f2c     ; Border Color
=$9f29			VERA_DC_HSTART      = $9f29     ; Active Display H-Start
=$9f2a			VERA_DC_HSTOP       = $9f2a     ; Active Display H-Stop
=$9f2b			VERA_DC_VSTART      = $9f2b     ; Active Display V-Start
=$9f2c			VERA_DC_VSTOP       = $9f2c     ; Active Display V-Stop
=$9f29			VERA_FX_CTRL        = $9f29     ; ADDR1 Update Mode / VRAM Data Port Write Mode
=$9f2a			VERA_FX_TILEBASE    = $9f2a     ; Affine Transformation Tile Base (write only)
=$9f2b			VERA_FX_MAPBASE     = $9f2b     ; Affine Transformation Map Base (write only)
=$9f2c			VERA_FX_MULT        = $9f2c     ; Write Cache Index / Multiply-accumulate Mode (write only)
=$9f29			VERA_FX_X_INCR_L    = $9f29     ; X Position Increment (lower 8 bits) (write only)
=$9f2a			VERA_FX_X_INCR_H    = $9f2a     ; X Position Increment (upper 8 bits) (write only)
=$9f2b			VERA_FX_Y_INCR_L    = $9f2b     ; Y Position Increment (lower 8 bits) (write only)
=$9f2c			VERA_FX_Y_INCR_H    = $9f2c     ; Y Position Increment (upper 8 bits) (write only)
=$9f29			VERA_FX_X_POS_L     = $9f29     ; Pixel X Position (lower 8 bits) (write only)
=$9f2a			VERA_FX_X_POS_H     = $9f2a     ; Pixel X Position (upper 3 bits) (write only)
=$9f2b			VERA_FX_Y_POS_L     = $9f2b     ; Pixel Y Position (lower 8 bits) (write only)
=$9f2c			VERA_FX_Y_POS_H     = $9f2c     ; Pixel Y Position (upper 3 bits) (write only)
=$9f29			VERA_FX_X_POS_S     = $9f29     ; Pixel X Fractional Position (upper 8 bits) (write only)
=$9f2a			VERA_FX_Y_POS_S     = $9f2a     ; Pixel Y Fractional Position (upper 8 bits) (write only)
=$9f2b			VERA_FX_POLY_FILL_L = $9f2b     ; Fill Length (lower 3 bits) (read only)
=$9f2c			VERA_FX_POLY_FILL_H = $9f2c     ; Fill Length (upper 7 bits) (read only)
=$9f29			VERA_FX_CACHE_L     = $9f29     ; 32-bit Write Cache Data  (write only)
=$9f29			VERA_FX_ACCUM_RESET = $9f29     ; (read only)
=$9f2a			VERA_FX_CACHE_M     = $9f2a     ; (write only)
=$9f2a			VERA_FX_ACCUM       = $9f2a     ; (read only)
=$9f2b			VERAFX_CACHE_H      = $9f2b     ; (write only)
=$9f2c			VERA_FX_CACHE_U     = $9f2c     ; (write only)
=$9f29			VERA_DC_VER0        = $9f29      ; Version Number (read only)
=$9f2a			VERA_DC_VER1        = $9f2a
=$9f2b			VERA_DC_VER2        = $9f2b
=$9f2c			VERA_DC_VER3        = $9f2c
=$9f2d			VERA_L0_CONFIG      = $9f2d
=$9f2e			VERA_L0_MAPBASE     = $9f2e
=$9f2f			VERA_L0_TILEBASE    = $9f2f
=$9f30			VERA_L0_HSCROLL_L   = $9f30
=$9f31			VERA_L0_HSCROLL_H   = $9f31
=$9f32			VERA_L0_VSCROLL_L   = $9f32
=$9f33			VERA_L0_VSCROLL_H   = $9f33
=$9f34			VERA_L1_CONFIG      = $9f34
=$9f35			VERA_L1_MAPBASE     = $9f35
=$9f36			VERA_L1_TILEBASE    = $9f36
=$9f37			VERA_L1_HSCROLL_L   = $9f37
=$9f38			VERA_L1_HSCROLL_H   = $9f38
=$9f39			VERA_L1_VSCROLL_L   = $9f39
=$9f3a			VERA_L1_VSCROLL_H   = $9f3a
=$9f3b			VERA_AUDIO_CTRL     = $9f3b
=$9f3c			VERA_AUDIO_RATE     = $9f3c
=$9f3d			VERA_AUDIO_DATA     = $9f3d
=$9f3e			VERA_SPI_DATA       = $9f3e
=$9f3f			VERA_SPI_CTRL       = $9f3f
=$ff81			CINT        = $ff81
=$ffb7			READST      = $ffb7
=$ffba			SETLFS      = $ffba
=$ffbd			SETNAM      = $ffbd
=$ffc0			OPEN        = $ffc0
=$ffc3			CLOSE       = $ffc3
=$ffc6			CHKIN       = $ffc6
=$ffc9			CHKOUT      = $ffc9
=$ffcf			CHRIN       = $FFCF
=$ffd2			CHROUT      = $ffd2
=$ffd5			LOAD        = $ffd5
=$ffd8			SAVE        = $ffd8
=$ffe7			CLALL       = $ffe7
=$ff90			SETMSG      = $ff90
=$ffa5			ACPTR       = $ffa5
=$ffa8			CIOUT       = $ffa8
=$ffab			UNTALK      = $ffab
=$ffae			UNLSN       = $ffae
=$ffb1			LISTEN      = $ffb1
=$ffb4			TALK        = $ffb4
=$ff93			SECOND      = $ff93
=$ff96			TALKSA      = $ff96
=$ffcc			CLRCHN      = $ffcc
=$ffe4			GETIN       = $ffe4
=$ff5f			SCREEN_MODE = $ff5f
=$0287			STATUS      = $0287

;******  Return to file: ./src/x16_demo1.asm

>0801	0c 08		.byte $0C, $08  ; pointer to next line
>0803	0a 00		.byte $0A, $00  ; line number (10)
>0805	9e		.byte $9E       ; SYS token
>0806	20 32 30 36	.text " 2062"   ; SYS address in ASCII
>080a	32
>080b	00 00 00	.byte 0, 0, 0   ; end-of-program
.080e	20 5f 0c	    jsr screen_hires
.0811	20 74 0c	    jsr screen_clear
.0814	a9 40		    lda #$40
.0816	85 02		    sta r0L
.0818	a9 01		    lda #$01
.081a	85 03		    sta r0H
.081c	a9 00		    lda #$00
.081e	85 04		    sta r1L
.0820	a9 00		    lda #$00
.0822	85 05		    sta r1H
.0824	a9 e0		    lda #$e0
.0826	85 06		    sta r2L
.0828	a9 01		    lda #$01
.082a	85 07		    sta r2H
.082c	20 28 0d	    jsr vertical_line
.082f	a9 00		    lda #$00
.0831	85 02		    sta r0L
.0833	a9 00		    lda #$00
.0835	85 03		    sta r0H
.0837	a9 f0		    lda #$f0
.0839	85 04		    sta r1L
.083b	a9 00		    lda #$00
.083d	85 05		    sta r1H
.083f	a9 80		    lda #$80
.0841	85 06		    sta r2L
.0843	a9 02		    lda #$02
.0845	85 07		    sta r2H
.0847	20 5d 0d	    jsr horizontal_line
.084a	a9 0a		    lda #$0a
.084c	85 02		    sta r0L
.084e	a9 00		    lda #$00
.0850	85 03		    sta r0H
.0852	a9 0a		    lda #$0a
.0854	85 04		    sta r1L
.0856	a9 00		    lda #$00
.0858	85 05		    sta r1H
.085a	a9 14		    lda #$14
.085c	85 06		    sta r2L
.085e	a9 00		    lda #$00
.0860	85 07		    sta r2H
.0862	a9 19		    lda #$19
.0864	85 08		    sta r3L
.0866	a9 00		    lda #$00
.0868	85 09		    sta r3H
.086a	20 5d 0d	    jsr horizontal_line
.086d			wait_key:
.086d	20 cf ff	    jsr CHRIN
.0870	f0 fb		    beq wait_key
.0872	20 81 ff	    jsr CINT
.0875	60		    rts

;******  Processing file: ./src/x16_font.asm

.0876			vwfont:
>0876	04 07 00 00	.byte $04, $07, $00, $00, $00, $00, $00, $00, $00, $00, $00       ; // space
>087a	00 00 00 00 00 00 00
>0881	01 07 00 80	.byte $01, $07, $00, $80, $80, $80, $80, $00, $80, $80, $00       ; // !
>0885	80 80 80 00 80 80 00
>088c	03 02 00 a0	.byte $03, $02, $00, $A0, $A0, $00, $00, $00, $00, $00, $00       ; // "
>0890	a0 00 00 00 00 00 00
>0897	05 07 00 50	.byte $05, $07, $00, $50, $50, $F8, $50, $F8, $50, $50, $00       ; // #
>089b	50 f8 50 f8 50 50 00
>08a2	05 08 00 78	.byte $05, $08, $00, $78, $A0, $60, $20, $30, $28, $F0, $20       ; // $
>08a6	a0 60 20 30 28 f0 20
>08ad	05 07 00 c0	.byte $05, $07, $00, $C0, $C8, $10, $20, $40, $98, $18, $00       ; // %
>08b1	c8 10 20 40 98 18 00
>08b8	05 07 00 60	.byte $05, $07, $00, $60, $80, $90, $78, $90, $90, $70, $00       ; // &
>08bc	80 90 78 90 90 70 00
>08c3	02 07 00 40	.byte $02, $07, $00, $40, $40, $80, $00, $00, $00, $00, $00       ; // '
>08c7	40 80 00 00 00 00 00
>08ce	03 08 01 20	.byte $03, $08, $01, $20, $40, $80, $80, $80, $80, $40, $20       ; // (
>08d2	40 80 80 80 80 40 20
>08d9	03 08 01 80	.byte $03, $08, $01, $80, $40, $20, $20, $20, $20, $40, $80       ; // )
>08dd	40 20 20 20 20 40 80
>08e4	05 07 00 20	.byte $05, $07, $00, $20, $A8, $70, $F8, $70, $A8, $20, $00       ; // *
>08e8	a8 70 f8 70 a8 20 00
>08ef	05 07 00 00	.byte $05, $07, $00, $00, $20, $20, $F8, $20, $20, $00, $00       ; // +
>08f3	20 20 f8 20 20 00 00
>08fa	02 02 01 40	.byte $02, $02, $01, $40, $80, $00, $00, $00, $00, $00, $00       ; // ,
>08fe	80 00 00 00 00 00 00
>0905	04 07 00 00	.byte $04, $07, $00, $00, $00, $00, $F0, $00, $00, $00, $00       ; // -
>0909	00 00 f0 00 00 00 00
>0910	01 01 00 80	.byte $01, $01, $00, $80, $00, $00, $00, $00, $00, $00, $00       ; // .
>0914	00 00 00 00 00 00 00
>091b	06 07 00 00	.byte $06, $07, $00, $00, $04, $08, $10, $20, $40, $80, $00       ; // /
>091f	04 08 10 20 40 80 00
>0926	04 07 00 60	.byte $04, $07, $00, $60, $90, $B0, $D0, $90, $90, $60, $00       ; // 0
>092a	90 b0 d0 90 90 60 00
>0931	02 07 00 40	.byte $02, $07, $00, $40, $C0, $40, $40, $40, $40, $40, $00       ; // 1
>0935	c0 40 40 40 40 40 00
>093c	03 07 00 c0	.byte $03, $07, $00, $C0, $20, $20, $40, $80, $80, $E0, $00       ; // 2
>0940	20 20 40 80 80 e0 00
>0947	03 07 00 c0	.byte $03, $07, $00, $C0, $20, $20, $40, $20, $20, $C0, $00       ; // 3
>094b	20 20 40 20 20 c0 00
>0952	04 07 00 10	.byte $04, $07, $00, $10, $30, $50, $90, $F0, $10, $10, $00       ; // 4
>0956	30 50 90 f0 10 10 00
>095d	03 07 00 e0	.byte $03, $07, $00, $E0, $80, $C0, $20, $20, $20, $C0, $00       ; // 5
>0961	80 c0 20 20 20 c0 00
>0968	04 07 00 20	.byte $04, $07, $00, $20, $40, $80, $E0, $90, $90, $60, $00       ; // 6
>096c	40 80 e0 90 90 60 00
>0973	04 07 00 f0	.byte $04, $07, $00, $F0, $10, $20, $40, $40, $40, $40, $00       ; // 7
>0977	10 20 40 40 40 40 00
>097e	04 07 00 60	.byte $04, $07, $00, $60, $90, $90, $60, $90, $90, $60, $00       ; // 8
>0982	90 90 60 90 90 60 00
>0989	04 07 00 60	.byte $04, $07, $00, $60, $90, $90, $70, $10, $20, $40, $00       ; // 9
>098d	90 90 70 10 20 40 00
>0994	01 04 00 80	.byte $01, $04, $00, $80, $00, $00, $80, $00, $00, $00, $00       ; // :
>0998	00 00 80 00 00 00 00
>099f	02 05 01 40	.byte $02, $05, $01, $40, $00, $00, $40, $80, $00, $00, $00       ; // ;
>09a3	00 00 40 80 00 00 00
>09aa	03 06 00 00	.byte $03, $06, $00, $00, $20, $40, $80, $40, $20, $00, $00       ; // <
>09ae	20 40 80 40 20 00 00
>09b5	04 06 00 00	.byte $04, $06, $00, $00, $F0, $00, $F0, $00, $00, $00, $00       ; // =
>09b9	f0 00 f0 00 00 00 00
>09c0	03 06 00 00	.byte $03, $06, $00, $00, $80, $40, $20, $40, $80, $00, $00       ; // >
>09c4	80 40 20 40 80 00 00
>09cb	05 07 00 70	.byte $05, $07, $00, $70, $88, $10, $20, $20, $00, $20, $00       ; // ?
>09cf	88 10 20 20 00 20 00
>09d6	05 07 00 70	.byte $05, $07, $00, $70, $88, $B8, $A8, $B8, $80, $70, $00       ; // @
>09da	88 b8 a8 b8 80 70 00
>09e1	04 05 00 70	.byte $04, $05, $00, $70, $90, $90, $90, $50, $00, $00, $00       ; // a
>09e5	90 90 90 50 00 00 00
>09ec	04 07 00 80	.byte $04, $07, $00, $80, $80, $E0, $90, $90, $90, $E0, $00       ; // b
>09f0	80 e0 90 90 90 e0 00
>09f7	04 05 00 60	.byte $04, $05, $00, $60, $90, $80, $80, $70, $00, $00, $00       ; // c
>09fb	90 80 80 70 00 00 00
>0a02	04 07 00 10	.byte $04, $07, $00, $10, $10, $70, $90, $90, $90, $70, $00       ; // d
>0a06	10 70 90 90 90 70 00
>0a0d	04 05 00 60	.byte $04, $05, $00, $60, $90, $F0, $80, $70, $00, $00, $00       ; // e
>0a11	90 f0 80 70 00 00 00
>0a18	02 07 00 40	.byte $02, $07, $00, $40, $80, $C0, $80, $80, $80, $80, $00       ; // f
>0a1c	80 c0 80 80 80 80 00
>0a23	04 07 02 70	.byte $04, $07, $02, $70, $90, $90, $90, $70, $10, $20, $00       ; // g
>0a27	90 90 90 70 10 20 00
>0a2e	04 07 00 80	.byte $04, $07, $00, $80, $80, $E0, $90, $90, $90, $90, $00       ; // h
>0a32	80 e0 90 90 90 90 00
>0a39	01 07 00 80	.byte $01, $07, $00, $80, $00, $80, $80, $80, $80, $80, $00       ; // i
>0a3d	00 80 80 80 80 80 00
>0a44	02 07 02 40	.byte $02, $07, $02, $40, $00, $40, $40, $40, $40, $80, $00       ; // j
>0a48	00 40 40 40 40 80 00
>0a4f	04 07 00 80	.byte $04, $07, $00, $80, $80, $90, $A0, $C0, $A0, $90, $00       ; // k
>0a53	80 90 a0 c0 a0 90 00
>0a5a	01 07 00 80	.byte $01, $07, $00, $80, $80, $80, $80, $80, $80, $80, $00       ; // l
>0a5e	80 80 80 80 80 80 00
>0a65	07 05 00 ec	.byte $07, $05, $00, $EC, $92, $92, $92, $92, $00, $00, $00       ; // m
>0a69	92 92 92 92 00 00 00
>0a70	04 05 00 e0	.byte $04, $05, $00, $E0, $90, $90, $90, $90, $00, $00, $00       ; // n
>0a74	90 90 90 90 00 00 00
>0a7b	05 05 00 70	.byte $05, $05, $00, $70, $88, $88, $88, $70, $00, $00, $00       ; // o
>0a7f	88 88 88 70 00 00 00
>0a86	04 07 02 e0	.byte $04, $07, $02, $E0, $90, $90, $90, $E0, $80, $80, $00       ; // p
>0a8a	90 90 90 e0 80 80 00
>0a91	04 07 02 70	.byte $04, $07, $02, $70, $90, $90, $90, $70, $10, $10, $00       ; // q
>0a95	90 90 90 70 10 10 00
>0a9c	02 05 00 40	.byte $02, $05, $00, $40, $80, $80, $80, $80, $00, $00, $00       ; // r
>0aa0	80 80 80 80 00 00 00
>0aa7	03 05 00 60	.byte $03, $05, $00, $60, $80, $40, $20, $C0, $00, $00, $00       ; // s
>0aab	80 40 20 c0 00 00 00
>0ab2	02 07 00 80	.byte $02, $07, $00, $80, $C0, $80, $80, $80, $80, $40, $00       ; // t
>0ab6	c0 80 80 80 80 40 00
>0abd	04 05 00 90	.byte $04, $05, $00, $90, $90, $90, $90, $70, $00, $00, $00       ; // u
>0ac1	90 90 90 70 00 00 00
>0ac8	05 05 00 88	.byte $05, $05, $00, $88, $88, $88, $50, $20, $00, $00, $00       ; // v
>0acc	88 88 50 20 00 00 00
>0ad3	07 05 00 92	.byte $07, $05, $00, $92, $92, $92, $92, $6C, $00, $00, $00       ; // w
>0ad7	92 92 92 6c 00 00 00
>0ade	05 05 00 88	.byte $05, $05, $00, $88, $50, $20, $50, $88, $00, $00, $00       ; // x
>0ae2	50 20 50 88 00 00 00
>0ae9	04 07 02 90	.byte $04, $07, $02, $90, $90, $90, $90, $70, $10, $20, $00       ; // y
>0aed	90 90 90 70 10 20 00
>0af4	04 05 00 f0	.byte $04, $05, $00, $F0, $20, $40, $80, $F0, $00, $00, $00       ; // z
>0af8	20 40 80 f0 00 00 00
>0aff	02 07 00 c0	.byte $02, $07, $00, $C0, $80, $80, $80, $80, $80, $C0, $00       ; // [
>0b03	80 80 80 80 80 c0 00
>0b0a	07 07 00 80	.byte $07, $07, $00, $80, $40, $20, $10, $08, $04, $02, $00       ; // slash
>0b0e	40 20 10 08 04 02 00
>0b15	02 07 00 c0	.byte $02, $07, $00, $C0, $40, $40, $40, $40, $40, $C0, $00       ; // ]
>0b19	40 40 40 40 40 c0 00
>0b20	05 07 00 20	.byte $05, $07, $00, $20, $50, $88, $00, $00, $00, $00, $00       ; // ^
>0b24	50 88 00 00 00 00 00
>0b2b	05 01 00 f8	.byte $05, $01, $00, $F8, $00, $00, $00, $00, $00, $00, $00       ; // _
>0b2f	00 00 00 00 00 00 00
>0b36	02 07 00 80	.byte $02, $07, $00, $80, $80, $40, $00, $00, $00, $00, $00       ; // `
>0b3a	80 40 00 00 00 00 00
>0b41	05 07 00 20	.byte $05, $07, $00, $20, $50, $88, $88, $F8, $88, $88, $00       ; // A
>0b45	50 88 88 f8 88 88 00
>0b4c	04 07 00 e0	.byte $04, $07, $00, $E0, $90, $90, $E0, $90, $90, $E0, $00       ; // B
>0b50	90 90 e0 90 90 e0 00
>0b57	04 07 00 60	.byte $04, $07, $00, $60, $90, $80, $80, $80, $80, $70, $00       ; // C
>0b5b	90 80 80 80 80 70 00
>0b62	04 07 00 e0	.byte $04, $07, $00, $E0, $90, $90, $90, $90, $90, $E0, $00       ; // D
>0b66	90 90 90 90 90 e0 00
>0b6d	03 07 00 e0	.byte $03, $07, $00, $E0, $80, $80, $E0, $80, $80, $E0, $00       ; // E
>0b71	80 80 e0 80 80 e0 00
>0b78	03 07 00 e0	.byte $03, $07, $00, $E0, $80, $80, $E0, $80, $80, $80, $00       ; // F
>0b7c	80 80 e0 80 80 80 00
>0b83	04 07 00 60	.byte $04, $07, $00, $60, $90, $80, $80, $B0, $90, $70, $00       ; // G
>0b87	90 80 80 b0 90 70 00
>0b8e	05 07 00 88	.byte $05, $07, $00, $88, $88, $88, $F8, $88, $88, $88, $00       ; // H
>0b92	88 88 f8 88 88 88 00
>0b99	01 07 00 80	.byte $01, $07, $00, $80, $80, $80, $80, $80, $80, $80, $00       ; // I
>0b9d	80 80 80 80 80 80 00
>0ba4	03 07 00 20	.byte $03, $07, $00, $20, $20, $20, $20, $20, $20, $C0, $00       ; // J
>0ba8	20 20 20 20 20 c0 00
>0baf	05 07 00 88	.byte $05, $07, $00, $88, $90, $A0, $C0, $A0, $90, $88, $00       ; // K
>0bb3	90 a0 c0 a0 90 88 00
>0bba	03 07 00 80	.byte $03, $07, $00, $80, $80, $80, $80, $80, $80, $E0, $00       ; // L
>0bbe	80 80 80 80 80 e0 00
>0bc5	07 07 00 82	.byte $07, $07, $00, $82, $C6, $AA, $92, $82, $82, $82, $00       ; // M
>0bc9	c6 aa 92 82 82 82 00
>0bd0	05 07 00 88	.byte $05, $07, $00, $88, $C8, $A8, $98, $88, $88, $88, $00       ; // N
>0bd4	c8 a8 98 88 88 88 00
>0bdb	05 07 00 70	.byte $05, $07, $00, $70, $88, $88, $88, $88, $88, $70, $00       ; // O
>0bdf	88 88 88 88 88 70 00
>0be6	04 07 00 e0	.byte $04, $07, $00, $E0, $90, $90, $90, $E0, $80, $80, $00       ; // P
>0bea	90 90 90 e0 80 80 00
>0bf1	05 08 01 70	.byte $05, $08, $01, $70, $88, $88, $88, $88, $98, $78, $04       ; // Q
>0bf5	88 88 88 88 98 78 04
>0bfc	04 07 00 e0	.byte $04, $07, $00, $E0, $90, $90, $90, $E0, $A0, $90, $00       ; // R
>0c00	90 90 90 e0 a0 90 00
>0c07	04 07 00 70	.byte $04, $07, $00, $70, $80, $C0, $20, $10, $10, $E0, $00       ; // S
>0c0b	80 c0 20 10 10 e0 00
>0c12	03 07 00 e0	.byte $03, $07, $00, $E0, $40, $40, $40, $40, $40, $40, $00       ; // T
>0c16	40 40 40 40 40 40 00
>0c1d	04 07 00 90	.byte $04, $07, $00, $90, $90, $90, $90, $90, $90, $70, $00       ; // U
>0c21	90 90 90 90 90 70 00
>0c28	05 07 00 88	.byte $05, $07, $00, $88, $88, $88, $88, $88, $50, $20, $00       ; // V
>0c2c	88 88 88 88 50 20 00
>0c33	07 07 00 82	.byte $07, $07, $00, $82, $82, $82, $92, $AA, $C6, $82, $00       ; // W
>0c37	82 82 92 aa c6 82 00
>0c3e	05 07 00 88	.byte $05, $07, $00, $88, $88, $50, $20, $50, $88, $88, $00       ; // X
>0c42	88 50 20 50 88 88 00
>0c49	05 07 00 88	.byte $05, $07, $00, $88, $88, $88, $50, $20, $20, $20, $00       ; // Y
>0c4d	88 88 50 20 20 20 00
>0c54	07 07 00 f8	.byte $07, $07, $00, $F8, $08, $10, $20, $40, $80, $F8, $00       ; // Z
>0c58	08 10 20 40 80 f8 00

;******  Return to file: ./src/x16_demo1.asm


;******  Processing file: ./src/x16_hireslib.asm

.0c5f			screen_hires:
.0c5f	a9 00		    lda #%00000000      ; DCSEL = 0, VRAM port 1
.0c61	8d 25 9f	    sta VERA_CTRL
.0c64	a9 21		    lda #%00100001
.0c66	8d 29 9f	    sta VERA_DC_VIDEO
.0c69	a9 04		    lda #%00000100
.0c6b	8d 34 9f	    sta VERA_L1_CONFIG
.0c6e	a9 01		    lda #%00000001
.0c70	8d 36 9f	    sta VERA_L1_TILEBASE
.0c73	60		    rts
.0c74			screen_clear:
.0c74	a9 04		    lda #(2 << 1)
.0c76	8d 25 9f	    sta VERA_CTRL
.0c79	a9 40		    lda #$40
.0c7b	0c 29 9f	    tsb VERA_FX_CTRL
.0c7e	a9 0c		    lda #(6 << 1)
.0c80	8d 25 9f	    sta VERA_CTRL
.0c83	9c 29 9f	    stz $9f29
.0c86	9c 2a 9f	    stz $9f2a
.0c89	9c 2b 9f	    stz $9f2b
.0c8c	9c 2c 9f	    stz $9f2c
.0c8f	9c 25 9f	    stz VERA_CTRL
.0c92	9c 20 9f	    stz VERA_ADDRx_L
.0c95	9c 21 9f	    stz VERA_ADDRx_M
.0c98	a9 30		    lda #$30  ; increment +4
.0c9a	8d 22 9f	    sta VERA_ADDRx_H
.0c9d	a0 f0		    ldy #240 ; number of rows
.0c9f			blank_outer:
.0c9f	a2 0a		    ldx #10 ; 10 iterations of 32 = one line of 320 at 8bpp
.0ca1			blank_loop:
.0ca1	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0ca4	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0ca7	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0caa	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0cad	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0cb0	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0cb3	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0cb6	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0cb9	ca		    dex
.0cba	d0 e5		    bne blank_loop
.0cbc	88		    dey
.0cbd	d0 e0		    bne blank_outer
.0cbf	a9 04		    lda #(2 << 1)
.0cc1	8d 25 9f	    sta VERA_CTRL ; $9f25
.0cc4	9c 29 9f	    stz VERA_FX_CTRL
.0cc7	9c 25 9f	    stz VERA_CTRL
.0cca	60		    rts
.0ccb			set_pixel:
.0ccb	a5 04		    lda r1L             ; Load y low byte
.0ccd	85 08		    sta r3L
.0ccf	a5 05		    lda r1H
.0cd1	85 09		    sta r3H
.0cd3	a9 50		    lda #$50            ; x 80
.0cd5	85 0a		    sta r4L
.0cd7	a9 00		    lda #$00
.0cd9	85 0b		    sta r4H
.0cdb	20 1d 0e	    jsr mult_16x16      ; Multiply by 80
.0cde	a5 0a		    lda r4L
.0ce0	8d 24 0d	    sta rowAddrL        ; Store row address low byte
.0ce3	a5 0b		    lda r4H
.0ce5	8d 25 0d	    sta rowAddrM
.0ce8	a5 08		    lda r3L             ; Load high byte result
.0cea	8d 26 0d	    sta rowAddrH        ; Store row address high byte
.0ced	20 05 0e	    jsr div_16bit_by_8
.0cf0	a5 0c		    lda r5L
.0cf2	8d 27 0d	    sta colAddrL
.0cf5	a5 02		    lda r0L             ; Load x low byte
.0cf7	29 07		    and #7              ; x % 8 (AND with 7)
.0cf9	aa		    tax                 ; Transfer to X for index
.0cfa	18		    clc
.0cfb	ad 24 0d	    lda rowAddrL
.0cfe	6d 27 0d	    adc colAddrL
.0d01	8d 20 9f	    sta VERA_ADDRx_L
.0d04	ad 25 0d	    lda rowAddrM
.0d07	69 00		    adc #$00
.0d09	8d 21 9f	    sta VERA_ADDRx_M
.0d0c	ad 26 0d	    lda rowAddrH
.0d0f	8d 22 9f	    sta VERA_ADDRx_H
.0d12	ad 23 9f	    lda VERA_DATA0      ; Load the byte at memory address
.0d15	1d 1c 0d	    ora bitMasks,X      ; OR with the bit mask
.0d18	8d 23 9f	    sta VERA_DATA0      ; Store back the modified byte
.0d1b	60		    rts
.0d1c			bitMasks:
>0d1c	80 40 20 10	    .byte %10000000, %01000000, %00100000, %00010000
>0d20	08 04 02 01	    .byte %00001000, %00000100, %00000010, %00000001
.0d24			rowAddrL:
>0d24	00		    .byte 0
.0d25			rowAddrM:
>0d25	00		    .byte 0
.0d26			rowAddrH:
>0d26	00		    .byte 0
.0d27			colAddrL:
>0d27	00		    .byte 0
.0d28			vertical_line:
.0d28	a5 04		    lda r1L
.0d2a	85 16		    sta r10L
.0d2c	a5 05		    lda r1H
.0d2e	85 17		    sta r10H
.0d30	a5 06		    lda r2L
.0d32	85 18		    sta r11L
.0d34	a5 07		    lda r2H
.0d36	85 19		    sta r11H
.0d38			loop:
.0d38	a5 16		    lda r10L
.0d3a	85 04		    sta r1L
.0d3c	a5 17		    lda r10H
.0d3e	85 05		    sta r1H
.0d40	20 cb 0c	    jsr set_pixel
.0d43	18		    clc
.0d44	a5 16		    lda r10L
.0d46	69 01		    adc #$01
.0d48	85 16		    sta r10L
.0d4a	a5 17		    lda r10H
.0d4c	69 00		    adc #$00
.0d4e	85 17		    sta r10H
.0d50	a5 17		    lda r10H
.0d52	c5 19		    cmp r11H
.0d54	d0 e2		    bne loop
.0d56	a5 16		    lda r10L
.0d58	c5 18		    cmp r11L
.0d5a	d0 dc		    bne loop
.0d5c	60		    rts
.0d5d			horizontal_line:
.0d5d	a5 02		    lda r0L
.0d5f	85 16		    sta r10L
.0d61	a5 03		    lda r0H
.0d63	85 17		    sta r10H
.0d65	a5 06		    lda r2L
.0d67	85 18		    sta r11L
.0d69	a5 07		    lda r2H
.0d6b	85 19		    sta r11H
.0d6d			loop:
.0d6d	a5 16		    lda r10L
.0d6f	85 02		    sta r0L
.0d71	a5 17		    lda r10H
.0d73	85 03		    sta r0H
.0d75	20 cb 0c	    jsr set_pixel
.0d78	18		    clc
.0d79	a5 16		    lda r10L
.0d7b	69 01		    adc #$01
.0d7d	85 16		    sta r10L
.0d7f	a5 17		    lda r10H
.0d81	69 00		    adc #$00
.0d83	85 17		    sta r10H
.0d85	a5 17		    lda r10H
.0d87	c5 19		    cmp r11H
.0d89	d0 e2		    bne loop
.0d8b	a5 16		    lda r10L
.0d8d	c5 18		    cmp r11L
.0d8f	d0 dc		    bne loop
.0d91	60		    rts
.0d92			rectangle:
.0d92	a5 02		    lda r0L
.0d94	8d fd 0d	    sta tmp_r0
.0d97	a5 03		    lda r0H
.0d99	8d fe 0d	    sta tmp_r0 + 1
.0d9c	a5 04		    lda r1L
.0d9e	8d ff 0d	    sta tmp_r1
.0da1	a5 05		    lda r1H
.0da3	8d 00 0e	    sta tmp_r1 + 1
.0da6	a5 06		    lda r2L
.0da8	8d 01 0e	    sta tmp_r2
.0dab	a5 07		    lda r2H
.0dad	8d 02 0e	    sta tmp_r2 + 1
.0db0	a5 08		    lda r3L
.0db2	8d 03 0e	    sta tmp_r3
.0db5	a5 09		    lda r3H
.0db7	8d 04 0e	    sta tmp_r3 + 1
.0dba	ad fd 0d	    lda tmp_r0
.0dbd	85 02		    sta r0L
.0dbf	ad fe 0d	    lda tmp_r0 + 1
.0dc2	85 03		    sta r0H
.0dc4	ad ff 0d	    lda tmp_r1
.0dc7	85 04		    sta r1L
.0dc9	ad 00 0e	    lda tmp_r1 + 1
.0dcc	85 05		    sta r1H
.0dce	ad 01 0e	    lda tmp_r2
.0dd1	85 06		    sta r2L
.0dd3	ad 02 0e	    lda tmp_r2 + 1
.0dd6	85 07		    sta r2H
.0dd8	20 5d 0d	    jsr horizontal_line
.0ddb	ad fd 0d	    lda tmp_r0
.0dde	85 02		    sta r0L
.0de0	ad fe 0d	    lda tmp_r0 + 1
.0de3	85 03		    sta r0H
.0de5	ad 03 0e	    lda tmp_r3
.0de8	85 04		    sta r1L
.0dea	ad 04 0e	    lda tmp_r3 + 1
.0ded	85 05		    sta r1H
.0def	ad 01 0e	    lda tmp_r2
.0df2	85 06		    sta r2L
.0df4	ad 02 0e	    lda tmp_r2 + 1
.0df7	85 07		    sta r2H
.0df9	20 5d 0d	    jsr horizontal_line
.0dfc	60		    rts
.0dfd			tmp_r0:
>0dfd	00 00		    .byte $00, $00
.0dff			tmp_r1:
>0dff	00 00		    .byte $00, $00
.0e01			tmp_r2:
>0e01	00 00		    .byte $00, $00
.0e03			tmp_r3:
>0e03	00 00		    .byte $00, $00
.0e05			div_16bit_by_8:
.0e05	a5 02		    lda r0l             ; load x low byte
.0e07	85 0c		    sta r5l             ; store low byte in templ
.0e09	a5 03		    lda r0h             ; load x high byte
.0e0b	85 0d		    sta r5h             ; store high byte in temph
.0e0d	a2 03		    ldx #3              ; set loop counter to 3
.0e0f			shift_loop:
.0e0f	a5 0d		    lda r5h             ; load high byte
.0e11	4a		    lsr a               ; logical shift right
.0e12	85 0d		    sta r5h             ; store shifted high byte
.0e14	a5 0c		    lda r5l             ; load low byte
.0e16	6a		    ror a               ; rotate right through carry (bringing in bit from high byte)
.0e17	85 0c		    sta r5l             ; store shifted low byte
.0e19	ca		    dex                 ; decrement loop counter
.0e1a	d0 f3		    bne shift_loop      ; repeat 3 times
.0e1c	60		    rts                 ; return from subroutine
.0e1d			mult_16x16:
.0e1d	64 0c		    stz r5l
.0e1f	64 0d		    stz r5h
.0e21	a5 0a		    lda r4l    ; get the multiplicand and
.0e23	85 0c		    sta r5l    ; put it in the scratchpad.
.0e25	a5 0b		    lda r4h
.0e27	85 0d		    sta r5h
.0e29	a9 00		    lda #$00
.0e2b	85 0a		    sta r4l    ; zero-out the original multiplicand area.
.0e2d	85 0b		    sta r4h
.0e2f	a0 10		    ldy #$10   ; we'll loop 16 times.
.0e31			lp1:
.0e31	06 0a		    asl r4l    ; shift the entire 32 bits over one bit position.
.0e33	26 0b		    rol r4h
.0e35	26 08		    rol r3l
.0e37	26 09		    rol r3h
.0e39	90 13		    bcc lp2    ; skip the adding-in to the result if
.0e3b	18		    clc        ; else, add multiplier to intermediate result.
.0e3c	a5 0c		    lda r5l
.0e3e	65 0a		    adc r4l
.0e40	85 0a		    sta r4l
.0e42	a5 0d		    lda r5h
.0e44	65 0b		    adc r4h
.0e46	85 0b		    sta r4h
.0e48	a9 00		    lda #$00   ; if c=1, incr lo byte of hi cell.
.0e4a	65 08		    adc r3l
.0e4c	85 08		    sta r3l
.0e4e			lp2:
.0e4e	88		    dey        ; if we haven't done 16 iterations yet,
.0e4f	d0 e0		    bne lp1    ; then go around again.
.0e51	60		    rts

;******  Return to file: ./src/x16_demo1.asm


;******  End of listing
