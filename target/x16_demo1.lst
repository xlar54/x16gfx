
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass --m65c02 -m -a -l ./target/x16_demo1.lbl -L ./target/x16_demo1.lst -o ./target/demo1 ./src/x16_demo1.asm
; Thu Jun 06 22:03:45 2024

;Offset	;Hex		;Source

;******  Processing input file: ./src/x16_demo1.asm


;******  Processing file: ./src/x16_regs.asm

=$02			r0	= $02
=$02			r0L	= $02
=$03			r0H	= $03
=$04			r1	= $04
=$04			r1L	= $04
=$05			r1H	= $05
=$06			r2	= $06
=$06			r2L	= $06
=$07			r2H	= $07
=$08			r3	= $08
=$08			r3L	= $08
=$09			r3H	= $09
=$0a			r4	= $0a
=$0a			r4L	= $0a
=$0b			r4H	= $0b
=$0c			r5	= $0c
=$0c			r5L	= $0c
=$0d			r5H	= $0d
=$0e			r6	= $0e
=$0e			r6L	= $0e
=$0f			r6H	= $0f
=$10			r7	= $10
=$10			r7L	= $10
=$11			r7H	= $11
=$12			r8	= $12
=$12			r8L	= $12
=$13			r8H	= $13
=$14			r9	= $14
=$14			r9L	= $14
=$15			r9H	= $15
=$16			r10	= $16
=$16			r10L	= $16
=$17			r10H	= $17
=$18			r11	= $18
=$18			r11L	= $18
=$19			r11H	= $19
=$1a			r12	= $1a
=$1a			r12L	= $1a
=$1b			r12H	= $1b
=$1c			r13	= $1c
=$1c			r13L	= $1c
=$1d			r13H	= $1d
=$1e			r14	= $1e
=$1e			r14L	= $1e
=$1f			r14H	= $1f
=$20			r15	= $20
=$20			r15L	= $20
=$21			r15H	= $21

;******  Return to file: ./src/x16_demo1.asm


;******  Processing file: ./src/x16_vera.asm

=$9f20			VERA_BASE           = $9f20
=$9f20			VERA_ADDRx_L        = $9f20
=$9f21			VERA_ADDRx_M        = $9f21
=$9f22			VERA_ADDRx_H        = $9f22
=$9f23			VERA_DATA0          = $9f23
=$9f24			VERA_DATA1          = $9f24
=$9f25			VERA_CTRL           = $9f25
=$9f26			VERA_IEN            = $9f26
=$9f27			VERA_ISR            = $9f27
=$9f28			VERA_IRQLINE_L      = $9f28 ; write only
=$9f28			VERA_SCANLINE_L     = $9f28 ; read only
=$9f29			VERA_DC_VIDEO       = $9f29     ; Active Display Control
=$9f2a			VERA_DC_HSCALE      = $9f2a     ; Active Display H-Scale
=$9f2b			VERA_DC_VSCALE      = $9f2b     ; Active Display V-Scale
=$9f2c			VERA_DC_BORDER      = $9f2c     ; Border Color
=$9f29			VERA_DC_HSTART      = $9f29     ; Active Display H-Start
=$9f2a			VERA_DC_HSTOP       = $9f2a     ; Active Display H-Stop
=$9f2b			VERA_DC_VSTART      = $9f2b     ; Active Display V-Start
=$9f2c			VERA_DC_VSTOP       = $9f2c     ; Active Display V-Stop
=$9f29			VERA_FX_CTRL        = $9f29     ; ADDR1 Update Mode / VRAM Data Port Write Mode
=$9f2a			VERA_FX_TILEBASE    = $9f2a     ; Affine Transformation Tile Base (write only)
=$9f2b			VERA_FX_MAPBASE     = $9f2b     ; Affine Transformation Map Base (write only)
=$9f2c			VERA_FX_MULT        = $9f2c     ; Write Cache Index / Multiply-accumulate Mode (write only)
=$9f29			VERA_FX_X_INCR_L    = $9f29     ; X Position Increment (lower 8 bits) (write only)
=$9f2a			VERA_FX_X_INCR_H    = $9f2a     ; X Position Increment (upper 8 bits) (write only)
=$9f2b			VERA_FX_Y_INCR_L    = $9f2b     ; Y Position Increment (lower 8 bits) (write only)
=$9f2c			VERA_FX_Y_INCR_H    = $9f2c     ; Y Position Increment (upper 8 bits) (write only)
=$9f29			VERA_FX_X_POS_L     = $9f29     ; Pixel X Position (lower 8 bits) (write only)
=$9f2a			VERA_FX_X_POS_H     = $9f2a     ; Pixel X Position (upper 3 bits) (write only)
=$9f2b			VERA_FX_Y_POS_L     = $9f2b     ; Pixel Y Position (lower 8 bits) (write only)
=$9f2c			VERA_FX_Y_POS_H     = $9f2c     ; Pixel Y Position (upper 3 bits) (write only)
=$9f29			VERA_FX_X_POS_S     = $9f29     ; Pixel X Fractional Position (upper 8 bits) (write only)
=$9f2a			VERA_FX_Y_POS_S     = $9f2a     ; Pixel Y Fractional Position (upper 8 bits) (write only)
=$9f2b			VERA_FX_POLY_FILL_L = $9f2b     ; Fill Length (lower 3 bits) (read only)
=$9f2c			VERA_FX_POLY_FILL_H = $9f2c     ; Fill Length (upper 7 bits) (read only)
=$9f29			VERA_FX_CACHE_L     = $9f29     ; 32-bit Write Cache Data  (write only)
=$9f29			VERA_FX_ACCUM_RESET = $9f29     ; (read only)
=$9f2a			VERA_FX_CACHE_M     = $9f2a     ; (write only)
=$9f2a			VERA_FX_ACCUM       = $9f2a     ; (read only)
=$9f2b			VERAFX_CACHE_H      = $9f2b     ; (write only)
=$9f2c			VERA_FX_CACHE_U     = $9f2c     ; (write only)
=$9f29			VERA_DC_VER0        = $9f29      ; Version Number (read only)
=$9f2a			VERA_DC_VER1        = $9f2a
=$9f2b			VERA_DC_VER2        = $9f2b
=$9f2c			VERA_DC_VER3        = $9f2c
=$9f2d			VERA_L0_CONFIG      = $9f2d
=$9f2e			VERA_L0_MAPBASE     = $9f2e
=$9f2f			VERA_L0_TILEBASE    = $9f2f
=$9f30			VERA_L0_HSCROLL_L   = $9f30
=$9f31			VERA_L0_HSCROLL_H   = $9f31
=$9f32			VERA_L0_VSCROLL_L   = $9f32
=$9f33			VERA_L0_VSCROLL_H   = $9f33
=$9f34			VERA_L1_CONFIG      = $9f34
=$9f35			VERA_L1_MAPBASE     = $9f35
=$9f36			VERA_L1_TILEBASE    = $9f36
=$9f37			VERA_L1_HSCROLL_L   = $9f37
=$9f38			VERA_L1_HSCROLL_H   = $9f38
=$9f39			VERA_L1_VSCROLL_L   = $9f39
=$9f3a			VERA_L1_VSCROLL_H   = $9f3a
=$9f3b			VERA_AUDIO_CTRL     = $9f3b
=$9f3c			VERA_AUDIO_RATE     = $9f3c
=$9f3d			VERA_AUDIO_DATA     = $9f3d
=$9f3e			VERA_SPI_DATA       = $9f3e
=$9f3f			VERA_SPI_CTRL       = $9f3f
=$ff81			CINT        = $ff81
=$ffb7			READST      = $ffb7
=$ffba			SETLFS      = $ffba
=$ffbd			SETNAM      = $ffbd
=$ffc0			OPEN        = $ffc0
=$ffc3			CLOSE       = $ffc3
=$ffc6			CHKIN       = $ffc6
=$ffc9			CHKOUT      = $ffc9
=$ffcf			CHRIN       = $FFCF
=$ffd2			CHROUT      = $ffd2
=$ffd5			LOAD        = $ffd5
=$ffd8			SAVE        = $ffd8
=$ffe7			CLALL       = $ffe7
=$ff90			SETMSG      = $ff90
=$ffa5			ACPTR       = $ffa5
=$ffa8			CIOUT       = $ffa8
=$ffab			UNTALK      = $ffab
=$ffae			UNLSN       = $ffae
=$ffb1			LISTEN      = $ffb1
=$ffb4			TALK        = $ffb4
=$ff93			SECOND      = $ff93
=$ff96			TALKSA      = $ff96
=$ffcc			CLRCHN      = $ffcc
=$ffe4			GETIN       = $ffe4
=$ff5f			SCREEN_MODE = $ff5f
=$0287			STATUS      = $0287

;******  Return to file: ./src/x16_demo1.asm


;******  Processing file: ./src/x16_macros.asm


;******  Return to file: ./src/x16_demo1.asm

>0801	0c 08		.byte $0C, $08  ; pointer to next line
>0803	0a 00		.byte $0A, $00  ; line number (10)
>0805	9e		.byte $9E       ; SYS token
>0806	20 32 30 36	.text " 2062"   ; SYS address in ASCII
>080a	32
>080b	00 00 00	.byte 0, 0, 0   ; end-of-program
.080e	20 79 0d	    jsr screen_hires
.0811	a9 00		    lda #$00
.0813	20 8e 0d	    jsr screen_clear
.0816	a9 40		    lda #<($140)
.0818	85 02		    sta r0
.081a	a9 01		    lda #>$140
.081c	85 03		    sta r0 + 1
.081e	a9 00		    lda #<($0)
.0820	85 04		    sta r1
.0822	a9 00		    lda #>$0
.0824	85 05		    sta r1 + 1
.0826	a9 e0		    lda #<($1e0)
.0828	85 06		    sta r2
.082a	a9 01		    lda #>$1e0
.082c	85 07		    sta r2 + 1
.082e	20 46 0e	    jsr vertical_line
.0831	a9 00		    lda #<($0)
.0833	85 02		    sta r0
.0835	a9 00		    lda #>$0
.0837	85 03		    sta r0 + 1
.0839	a9 f0		    lda #<($f0)
.083b	85 04		    sta r1
.083d	a9 00		    lda #>$f0
.083f	85 05		    sta r1 + 1
.0841	a9 80		    lda #<($280)
.0843	85 06		    sta r2
.0845	a9 02		    lda #>$280
.0847	85 07		    sta r2 + 1
.0849	20 7b 0e	    jsr horizontal_line
.084c	20 86 09	    jsr wait_key
.084f	20 8e 0d	    jsr screen_clear
.0852	a9 00		    lda #<0
.0854	85 02		    sta r0L
.0856	a9 00		    lda #>0
.0858	85 03		    sta r0H
.085a	a9 00		    lda #<0
.085c	85 04		    sta r1L
.085e	a9 00		    lda #>0
.0860	85 05		    sta r1H
.0862	a9 ae		    lda #<430
.0864	85 06		    sta r2L
.0866	a9 01		    lda #>430
.0868	85 07		    sta r2H
.086a	a9 14		    lda #<20
.086c	85 08		    sta r3L
.086e	a9 00		    lda #>20
.0870	85 09		    sta r3H
.0872	20 b0 0e	    jsr rectangle
.0875	a9 e0		    lda #<480
.0877	85 02		    sta r0L
.0879	a9 01		    lda #>480
.087b	85 03		    sta r0H
.087d	a9 00		    lda #<0
.087f	85 04		    sta r1L
.0881	a9 00		    lda #>0
.0883	85 05		    sta r1H
.0885	a9 7f		    lda #<639
.0887	85 06		    sta r2L
.0889	a9 02		    lda #>639
.088b	85 07		    sta r2H
.088d	a9 14		    lda #<20
.088f	85 08		    sta r3L
.0891	a9 00		    lda #>20
.0893	85 09		    sta r3H
.0895	20 b0 0e	    jsr rectangle
.0898	a9 14		    lda #<20
.089a	85 02		    sta r0L
.089c	a9 00		    lda #>20
.089e	85 03		    sta r0H
.08a0	a9 28		    lda #<40
.08a2	85 04		    sta r1L
.08a4	a9 00		    lda #>40
.08a6	85 05		    sta r1H
.08a8	a9 f4		    lda #<500
.08aa	85 06		    sta r2L
.08ac	a9 01		    lda #>500
.08ae	85 07		    sta r2H
.08b0	a9 5e		    lda #<350
.08b2	85 08		    sta r3L
.08b4	a9 01		    lda #>350
.08b6	85 09		    sta r3H
.08b8	20 b0 0e	    jsr rectangle
.08bb	a9 14		    lda #<20
.08bd	85 02		    sta r0L
.08bf	a9 00		    lda #>20
.08c1	85 03		    sta r0H
.08c3	a9 28		    lda #<40
.08c5	85 04		    sta r1L
.08c7	a9 00		    lda #>40
.08c9	85 05		    sta r1H
.08cb	a9 f4		    lda #<500
.08cd	85 06		    sta r2L
.08cf	a9 01		    lda #>500
.08d1	85 07		    sta r2H
.08d3	a9 50		    lda #<80
.08d5	85 08		    sta r3L
.08d7	a9 00		    lda #>80
.08d9	85 09		    sta r3H
.08db	20 b0 0e	    jsr rectangle
.08de	a9 14		    lda #<20
.08e0	85 02		    sta r0L
.08e2	a9 00		    lda #>20
.08e4	85 03		    sta r0H
.08e6	a9 2c		    lda #<44
.08e8	85 04		    sta r1L
.08ea	a9 00		    lda #>44
.08ec	85 05		    sta r1H
.08ee	a9 f4		    lda #<500
.08f0	85 06		    sta r2L
.08f2	a9 01		    lda #>500
.08f4	85 07		    sta r2H
.08f6	20 7b 0e	    jsr horizontal_line
.08f9	a9 14		    lda #<20
.08fb	85 02		    sta r0L
.08fd	a9 00		    lda #>20
.08ff	85 03		    sta r0H
.0901	a9 30		    lda #<48
.0903	85 04		    sta r1L
.0905	a9 00		    lda #>48
.0907	85 05		    sta r1H
.0909	a9 f4		    lda #<500
.090b	85 06		    sta r2L
.090d	a9 01		    lda #>500
.090f	85 07		    sta r2H
.0911	20 7b 0e	    jsr horizontal_line
.0914	a9 14		    lda #<20
.0916	85 02		    sta r0L
.0918	a9 00		    lda #>20
.091a	85 03		    sta r0H
.091c	a9 34		    lda #<52
.091e	85 04		    sta r1L
.0920	a9 00		    lda #>52
.0922	85 05		    sta r1H
.0924	a9 f4		    lda #<500
.0926	85 06		    sta r2L
.0928	a9 01		    lda #>500
.092a	85 07		    sta r2H
.092c	20 7b 0e	    jsr horizontal_line
.092f	a9 14		    lda #<20
.0931	85 02		    sta r0L
.0933	a9 00		    lda #>20
.0935	85 03		    sta r0H
.0937	a9 38		    lda #<56
.0939	85 04		    sta r1L
.093b	a9 00		    lda #>56
.093d	85 05		    sta r1H
.093f	a9 f4		    lda #<500
.0941	85 06		    sta r2L
.0943	a9 01		    lda #>500
.0945	85 07		    sta r2H
.0947	20 7b 0e	    jsr horizontal_line
.094a	a9 14		    lda #<20
.094c	85 02		    sta r0L
.094e	a9 00		    lda #>20
.0950	85 03		    sta r0H
.0952	a9 3c		    lda #<60
.0954	85 04		    sta r1L
.0956	a9 00		    lda #>60
.0958	85 05		    sta r1H
.095a	a9 f4		    lda #<500
.095c	85 06		    sta r2L
.095e	a9 01		    lda #>500
.0960	85 07		    sta r2H
.0962	20 7b 0e	    jsr horizontal_line
.0965	a9 14		    lda #<20
.0967	85 02		    sta r0L
.0969	a9 00		    lda #>20
.096b	85 03		    sta r0H
.096d	a9 5a		    lda #<346
.096f	85 04		    sta r1L
.0971	a9 01		    lda #>346
.0973	85 05		    sta r1H
.0975	a9 f4		    lda #<500
.0977	85 06		    sta r2L
.0979	a9 01		    lda #>500
.097b	85 07		    sta r2H
.097d	20 7b 0e	    jsr horizontal_line
.0980	20 86 09	    jsr wait_key
.0983	4c 8c 09	    jmp exit
.0986			wait_key:
.0986	20 e4 ff	    jsr GETIN
.0989	f0 fb		    beq wait_key
.098b	60		    rts
.098c			exit:
.098c	20 81 ff	    jsr CINT
.098f	60		    rts

;******  Processing file: ./src/x16_font.asm

.0990			vwfont:
>0990	04 07 00 00	.byte $04, $07, $00, $00, $00, $00, $00, $00, $00, $00, $00       ; // space
>0994	00 00 00 00 00 00 00
>099b	01 07 00 80	.byte $01, $07, $00, $80, $80, $80, $80, $00, $80, $80, $00       ; // !
>099f	80 80 80 00 80 80 00
>09a6	03 02 00 a0	.byte $03, $02, $00, $A0, $A0, $00, $00, $00, $00, $00, $00       ; // "
>09aa	a0 00 00 00 00 00 00
>09b1	05 07 00 50	.byte $05, $07, $00, $50, $50, $F8, $50, $F8, $50, $50, $00       ; // #
>09b5	50 f8 50 f8 50 50 00
>09bc	05 08 00 78	.byte $05, $08, $00, $78, $A0, $60, $20, $30, $28, $F0, $20       ; // $
>09c0	a0 60 20 30 28 f0 20
>09c7	05 07 00 c0	.byte $05, $07, $00, $C0, $C8, $10, $20, $40, $98, $18, $00       ; // %
>09cb	c8 10 20 40 98 18 00
>09d2	05 07 00 60	.byte $05, $07, $00, $60, $80, $90, $78, $90, $90, $70, $00       ; // &
>09d6	80 90 78 90 90 70 00
>09dd	02 07 00 40	.byte $02, $07, $00, $40, $40, $80, $00, $00, $00, $00, $00       ; // '
>09e1	40 80 00 00 00 00 00
>09e8	03 08 01 20	.byte $03, $08, $01, $20, $40, $80, $80, $80, $80, $40, $20       ; // (
>09ec	40 80 80 80 80 40 20
>09f3	03 08 01 80	.byte $03, $08, $01, $80, $40, $20, $20, $20, $20, $40, $80       ; // )
>09f7	40 20 20 20 20 40 80
>09fe	05 07 00 20	.byte $05, $07, $00, $20, $A8, $70, $F8, $70, $A8, $20, $00       ; // *
>0a02	a8 70 f8 70 a8 20 00
>0a09	05 07 00 00	.byte $05, $07, $00, $00, $20, $20, $F8, $20, $20, $00, $00       ; // +
>0a0d	20 20 f8 20 20 00 00
>0a14	02 02 01 40	.byte $02, $02, $01, $40, $80, $00, $00, $00, $00, $00, $00       ; // ,
>0a18	80 00 00 00 00 00 00
>0a1f	04 07 00 00	.byte $04, $07, $00, $00, $00, $00, $F0, $00, $00, $00, $00       ; // -
>0a23	00 00 f0 00 00 00 00
>0a2a	01 01 00 80	.byte $01, $01, $00, $80, $00, $00, $00, $00, $00, $00, $00       ; // .
>0a2e	00 00 00 00 00 00 00
>0a35	06 07 00 00	.byte $06, $07, $00, $00, $04, $08, $10, $20, $40, $80, $00       ; // /
>0a39	04 08 10 20 40 80 00
>0a40	04 07 00 60	.byte $04, $07, $00, $60, $90, $B0, $D0, $90, $90, $60, $00       ; // 0
>0a44	90 b0 d0 90 90 60 00
>0a4b	02 07 00 40	.byte $02, $07, $00, $40, $C0, $40, $40, $40, $40, $40, $00       ; // 1
>0a4f	c0 40 40 40 40 40 00
>0a56	03 07 00 c0	.byte $03, $07, $00, $C0, $20, $20, $40, $80, $80, $E0, $00       ; // 2
>0a5a	20 20 40 80 80 e0 00
>0a61	03 07 00 c0	.byte $03, $07, $00, $C0, $20, $20, $40, $20, $20, $C0, $00       ; // 3
>0a65	20 20 40 20 20 c0 00
>0a6c	04 07 00 10	.byte $04, $07, $00, $10, $30, $50, $90, $F0, $10, $10, $00       ; // 4
>0a70	30 50 90 f0 10 10 00
>0a77	03 07 00 e0	.byte $03, $07, $00, $E0, $80, $C0, $20, $20, $20, $C0, $00       ; // 5
>0a7b	80 c0 20 20 20 c0 00
>0a82	04 07 00 20	.byte $04, $07, $00, $20, $40, $80, $E0, $90, $90, $60, $00       ; // 6
>0a86	40 80 e0 90 90 60 00
>0a8d	04 07 00 f0	.byte $04, $07, $00, $F0, $10, $20, $40, $40, $40, $40, $00       ; // 7
>0a91	10 20 40 40 40 40 00
>0a98	04 07 00 60	.byte $04, $07, $00, $60, $90, $90, $60, $90, $90, $60, $00       ; // 8
>0a9c	90 90 60 90 90 60 00
>0aa3	04 07 00 60	.byte $04, $07, $00, $60, $90, $90, $70, $10, $20, $40, $00       ; // 9
>0aa7	90 90 70 10 20 40 00
>0aae	01 04 00 80	.byte $01, $04, $00, $80, $00, $00, $80, $00, $00, $00, $00       ; // :
>0ab2	00 00 80 00 00 00 00
>0ab9	02 05 01 40	.byte $02, $05, $01, $40, $00, $00, $40, $80, $00, $00, $00       ; // ;
>0abd	00 00 40 80 00 00 00
>0ac4	03 06 00 00	.byte $03, $06, $00, $00, $20, $40, $80, $40, $20, $00, $00       ; // <
>0ac8	20 40 80 40 20 00 00
>0acf	04 06 00 00	.byte $04, $06, $00, $00, $F0, $00, $F0, $00, $00, $00, $00       ; // =
>0ad3	f0 00 f0 00 00 00 00
>0ada	03 06 00 00	.byte $03, $06, $00, $00, $80, $40, $20, $40, $80, $00, $00       ; // >
>0ade	80 40 20 40 80 00 00
>0ae5	05 07 00 70	.byte $05, $07, $00, $70, $88, $10, $20, $20, $00, $20, $00       ; // ?
>0ae9	88 10 20 20 00 20 00
>0af0	05 07 00 70	.byte $05, $07, $00, $70, $88, $B8, $A8, $B8, $80, $70, $00       ; // @
>0af4	88 b8 a8 b8 80 70 00
>0afb	04 05 00 70	.byte $04, $05, $00, $70, $90, $90, $90, $50, $00, $00, $00       ; // a
>0aff	90 90 90 50 00 00 00
>0b06	04 07 00 80	.byte $04, $07, $00, $80, $80, $E0, $90, $90, $90, $E0, $00       ; // b
>0b0a	80 e0 90 90 90 e0 00
>0b11	04 05 00 60	.byte $04, $05, $00, $60, $90, $80, $80, $70, $00, $00, $00       ; // c
>0b15	90 80 80 70 00 00 00
>0b1c	04 07 00 10	.byte $04, $07, $00, $10, $10, $70, $90, $90, $90, $70, $00       ; // d
>0b20	10 70 90 90 90 70 00
>0b27	04 05 00 60	.byte $04, $05, $00, $60, $90, $F0, $80, $70, $00, $00, $00       ; // e
>0b2b	90 f0 80 70 00 00 00
>0b32	02 07 00 40	.byte $02, $07, $00, $40, $80, $C0, $80, $80, $80, $80, $00       ; // f
>0b36	80 c0 80 80 80 80 00
>0b3d	04 07 02 70	.byte $04, $07, $02, $70, $90, $90, $90, $70, $10, $20, $00       ; // g
>0b41	90 90 90 70 10 20 00
>0b48	04 07 00 80	.byte $04, $07, $00, $80, $80, $E0, $90, $90, $90, $90, $00       ; // h
>0b4c	80 e0 90 90 90 90 00
>0b53	01 07 00 80	.byte $01, $07, $00, $80, $00, $80, $80, $80, $80, $80, $00       ; // i
>0b57	00 80 80 80 80 80 00
>0b5e	02 07 02 40	.byte $02, $07, $02, $40, $00, $40, $40, $40, $40, $80, $00       ; // j
>0b62	00 40 40 40 40 80 00
>0b69	04 07 00 80	.byte $04, $07, $00, $80, $80, $90, $A0, $C0, $A0, $90, $00       ; // k
>0b6d	80 90 a0 c0 a0 90 00
>0b74	01 07 00 80	.byte $01, $07, $00, $80, $80, $80, $80, $80, $80, $80, $00       ; // l
>0b78	80 80 80 80 80 80 00
>0b7f	07 05 00 ec	.byte $07, $05, $00, $EC, $92, $92, $92, $92, $00, $00, $00       ; // m
>0b83	92 92 92 92 00 00 00
>0b8a	04 05 00 e0	.byte $04, $05, $00, $E0, $90, $90, $90, $90, $00, $00, $00       ; // n
>0b8e	90 90 90 90 00 00 00
>0b95	05 05 00 70	.byte $05, $05, $00, $70, $88, $88, $88, $70, $00, $00, $00       ; // o
>0b99	88 88 88 70 00 00 00
>0ba0	04 07 02 e0	.byte $04, $07, $02, $E0, $90, $90, $90, $E0, $80, $80, $00       ; // p
>0ba4	90 90 90 e0 80 80 00
>0bab	04 07 02 70	.byte $04, $07, $02, $70, $90, $90, $90, $70, $10, $10, $00       ; // q
>0baf	90 90 90 70 10 10 00
>0bb6	02 05 00 40	.byte $02, $05, $00, $40, $80, $80, $80, $80, $00, $00, $00       ; // r
>0bba	80 80 80 80 00 00 00
>0bc1	03 05 00 60	.byte $03, $05, $00, $60, $80, $40, $20, $C0, $00, $00, $00       ; // s
>0bc5	80 40 20 c0 00 00 00
>0bcc	02 07 00 80	.byte $02, $07, $00, $80, $C0, $80, $80, $80, $80, $40, $00       ; // t
>0bd0	c0 80 80 80 80 40 00
>0bd7	04 05 00 90	.byte $04, $05, $00, $90, $90, $90, $90, $70, $00, $00, $00       ; // u
>0bdb	90 90 90 70 00 00 00
>0be2	05 05 00 88	.byte $05, $05, $00, $88, $88, $88, $50, $20, $00, $00, $00       ; // v
>0be6	88 88 50 20 00 00 00
>0bed	07 05 00 92	.byte $07, $05, $00, $92, $92, $92, $92, $6C, $00, $00, $00       ; // w
>0bf1	92 92 92 6c 00 00 00
>0bf8	05 05 00 88	.byte $05, $05, $00, $88, $50, $20, $50, $88, $00, $00, $00       ; // x
>0bfc	50 20 50 88 00 00 00
>0c03	04 07 02 90	.byte $04, $07, $02, $90, $90, $90, $90, $70, $10, $20, $00       ; // y
>0c07	90 90 90 70 10 20 00
>0c0e	04 05 00 f0	.byte $04, $05, $00, $F0, $20, $40, $80, $F0, $00, $00, $00       ; // z
>0c12	20 40 80 f0 00 00 00
>0c19	02 07 00 c0	.byte $02, $07, $00, $C0, $80, $80, $80, $80, $80, $C0, $00       ; // [
>0c1d	80 80 80 80 80 c0 00
>0c24	07 07 00 80	.byte $07, $07, $00, $80, $40, $20, $10, $08, $04, $02, $00       ; // slash
>0c28	40 20 10 08 04 02 00
>0c2f	02 07 00 c0	.byte $02, $07, $00, $C0, $40, $40, $40, $40, $40, $C0, $00       ; // ]
>0c33	40 40 40 40 40 c0 00
>0c3a	05 07 00 20	.byte $05, $07, $00, $20, $50, $88, $00, $00, $00, $00, $00       ; // ^
>0c3e	50 88 00 00 00 00 00
>0c45	05 01 00 f8	.byte $05, $01, $00, $F8, $00, $00, $00, $00, $00, $00, $00       ; // _
>0c49	00 00 00 00 00 00 00
>0c50	02 07 00 80	.byte $02, $07, $00, $80, $80, $40, $00, $00, $00, $00, $00       ; // `
>0c54	80 40 00 00 00 00 00
>0c5b	05 07 00 20	.byte $05, $07, $00, $20, $50, $88, $88, $F8, $88, $88, $00       ; // A
>0c5f	50 88 88 f8 88 88 00
>0c66	04 07 00 e0	.byte $04, $07, $00, $E0, $90, $90, $E0, $90, $90, $E0, $00       ; // B
>0c6a	90 90 e0 90 90 e0 00
>0c71	04 07 00 60	.byte $04, $07, $00, $60, $90, $80, $80, $80, $80, $70, $00       ; // C
>0c75	90 80 80 80 80 70 00
>0c7c	04 07 00 e0	.byte $04, $07, $00, $E0, $90, $90, $90, $90, $90, $E0, $00       ; // D
>0c80	90 90 90 90 90 e0 00
>0c87	03 07 00 e0	.byte $03, $07, $00, $E0, $80, $80, $E0, $80, $80, $E0, $00       ; // E
>0c8b	80 80 e0 80 80 e0 00
>0c92	03 07 00 e0	.byte $03, $07, $00, $E0, $80, $80, $E0, $80, $80, $80, $00       ; // F
>0c96	80 80 e0 80 80 80 00
>0c9d	04 07 00 60	.byte $04, $07, $00, $60, $90, $80, $80, $B0, $90, $70, $00       ; // G
>0ca1	90 80 80 b0 90 70 00
>0ca8	05 07 00 88	.byte $05, $07, $00, $88, $88, $88, $F8, $88, $88, $88, $00       ; // H
>0cac	88 88 f8 88 88 88 00
>0cb3	01 07 00 80	.byte $01, $07, $00, $80, $80, $80, $80, $80, $80, $80, $00       ; // I
>0cb7	80 80 80 80 80 80 00
>0cbe	03 07 00 20	.byte $03, $07, $00, $20, $20, $20, $20, $20, $20, $C0, $00       ; // J
>0cc2	20 20 20 20 20 c0 00
>0cc9	05 07 00 88	.byte $05, $07, $00, $88, $90, $A0, $C0, $A0, $90, $88, $00       ; // K
>0ccd	90 a0 c0 a0 90 88 00
>0cd4	03 07 00 80	.byte $03, $07, $00, $80, $80, $80, $80, $80, $80, $E0, $00       ; // L
>0cd8	80 80 80 80 80 e0 00
>0cdf	07 07 00 82	.byte $07, $07, $00, $82, $C6, $AA, $92, $82, $82, $82, $00       ; // M
>0ce3	c6 aa 92 82 82 82 00
>0cea	05 07 00 88	.byte $05, $07, $00, $88, $C8, $A8, $98, $88, $88, $88, $00       ; // N
>0cee	c8 a8 98 88 88 88 00
>0cf5	05 07 00 70	.byte $05, $07, $00, $70, $88, $88, $88, $88, $88, $70, $00       ; // O
>0cf9	88 88 88 88 88 70 00
>0d00	04 07 00 e0	.byte $04, $07, $00, $E0, $90, $90, $90, $E0, $80, $80, $00       ; // P
>0d04	90 90 90 e0 80 80 00
>0d0b	05 08 01 70	.byte $05, $08, $01, $70, $88, $88, $88, $88, $98, $78, $04       ; // Q
>0d0f	88 88 88 88 98 78 04
>0d16	04 07 00 e0	.byte $04, $07, $00, $E0, $90, $90, $90, $E0, $A0, $90, $00       ; // R
>0d1a	90 90 90 e0 a0 90 00
>0d21	04 07 00 70	.byte $04, $07, $00, $70, $80, $C0, $20, $10, $10, $E0, $00       ; // S
>0d25	80 c0 20 10 10 e0 00
>0d2c	03 07 00 e0	.byte $03, $07, $00, $E0, $40, $40, $40, $40, $40, $40, $00       ; // T
>0d30	40 40 40 40 40 40 00
>0d37	04 07 00 90	.byte $04, $07, $00, $90, $90, $90, $90, $90, $90, $70, $00       ; // U
>0d3b	90 90 90 90 90 70 00
>0d42	05 07 00 88	.byte $05, $07, $00, $88, $88, $88, $88, $88, $50, $20, $00       ; // V
>0d46	88 88 88 88 50 20 00
>0d4d	07 07 00 82	.byte $07, $07, $00, $82, $82, $82, $92, $AA, $C6, $82, $00       ; // W
>0d51	82 82 92 aa c6 82 00
>0d58	05 07 00 88	.byte $05, $07, $00, $88, $88, $50, $20, $50, $88, $88, $00       ; // X
>0d5c	88 50 20 50 88 88 00
>0d63	05 07 00 88	.byte $05, $07, $00, $88, $88, $88, $50, $20, $20, $20, $00       ; // Y
>0d67	88 88 50 20 20 20 00
>0d6e	07 07 00 f8	.byte $07, $07, $00, $F8, $08, $10, $20, $40, $80, $F8, $00       ; // Z
>0d72	08 10 20 40 80 f8 00

;******  Return to file: ./src/x16_demo1.asm


;******  Processing file: ./src/x16_hireslib.asm

.0d79			screen_hires:
.0d79	a9 00		    lda #%00000000      ; DCSEL = 0, VRAM port 1
.0d7b	8d 25 9f	    sta VERA_CTRL
.0d7e	a9 21		    lda #%00100001
.0d80	8d 29 9f	    sta VERA_DC_VIDEO
.0d83	a9 04		    lda #%00000100
.0d85	8d 34 9f	    sta VERA_L1_CONFIG
.0d88	a9 01		    lda #%00000001
.0d8a	8d 36 9f	    sta VERA_L1_TILEBASE
.0d8d	60		    rts
.0d8e			screen_clear:
.0d8e	48		    pha
.0d8f	a9 04		    lda #(2 << 1)
.0d91	8d 25 9f	    sta VERA_CTRL
.0d94	a9 40		    lda #$40
.0d96	0c 29 9f	    tsb VERA_FX_CTRL
.0d99	a9 0c		    lda #(6 << 1)
.0d9b	8d 25 9f	    sta VERA_CTRL
.0d9e	68		    pla
.0d9f	a9 00		    lda #$00; $ff=white, $00=black
.0da1	8d 29 9f	    sta $9f29
.0da4	8d 2a 9f	    sta $9f2a
.0da7	8d 2b 9f	    sta $9f2b
.0daa	8d 2c 9f	    sta $9f2c
.0dad	9c 25 9f	    stz VERA_CTRL
.0db0	9c 20 9f	    stz VERA_ADDRx_L
.0db3	9c 21 9f	    stz VERA_ADDRx_M
.0db6	a9 30		    lda #$30  ; increment +4
.0db8	8d 22 9f	    sta VERA_ADDRx_H
.0dbb	a0 f0		    ldy #240 ; number of rows
.0dbd			blank_outer:
.0dbd	a2 0a		    ldx #10 ; 10 iterations of 32 = one line of 320 at 8bpp
.0dbf			blank_loop:
.0dbf	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dc2	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dc5	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dc8	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dcb	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dce	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dd1	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dd4	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dd7	ca		    dex
.0dd8	d0 e5		    bne blank_loop
.0dda	88		    dey
.0ddb	d0 e0		    bne blank_outer
.0ddd	a9 04		    lda #(2 << 1)
.0ddf	8d 25 9f	    sta VERA_CTRL ; $9f25
.0de2	9c 29 9f	    stz VERA_FX_CTRL
.0de5	9c 25 9f	    stz VERA_CTRL
.0de8	60		    rts
.0de9			set_pixel:
.0de9	a5 04		    lda r1L             ; Load y low byte
.0deb	85 08		    sta r3L
.0ded	a5 05		    lda r1H
.0def	85 09		    sta r3H
.0df1	a9 50		    lda #$50            ; x 80
.0df3	85 0a		    sta r4L
.0df5	a9 00		    lda #$00
.0df7	85 0b		    sta r4H
.0df9	20 7d 0f	    jsr mult_16x16      ; Multiply by 80
.0dfc	a5 0a		    lda r4L
.0dfe	8d 42 0e	    sta rowAddrL        ; Store row address low byte
.0e01	a5 0b		    lda r4H
.0e03	8d 43 0e	    sta rowAddrM
.0e06	a5 08		    lda r3L             ; Load high byte result
.0e08	8d 44 0e	    sta rowAddrH        ; Store row address high byte
.0e0b	20 65 0f	    jsr div_16bit_by_8
.0e0e	a5 0c		    lda r5L
.0e10	8d 45 0e	    sta colAddrL
.0e13	a5 02		    lda r0L             ; Load x low byte
.0e15	29 07		    and #7              ; x % 8 (AND with 7)
.0e17	aa		    tax                 ; Transfer to X for index
.0e18	18		    clc
.0e19	ad 42 0e	    lda rowAddrL
.0e1c	6d 45 0e	    adc colAddrL
.0e1f	8d 20 9f	    sta VERA_ADDRx_L
.0e22	ad 43 0e	    lda rowAddrM
.0e25	69 00		    adc #$00
.0e27	8d 21 9f	    sta VERA_ADDRx_M
.0e2a	ad 44 0e	    lda rowAddrH
.0e2d	8d 22 9f	    sta VERA_ADDRx_H
.0e30	ad 23 9f	    lda VERA_DATA0      ; Load the byte at memory address
.0e33	1d 3a 0e	    ora bitMasks,X      ; OR with the bit mask
.0e36	8d 23 9f	    sta VERA_DATA0      ; Store back the modified byte
.0e39	60		    rts
.0e3a			bitMasks:
>0e3a	80 40 20 10	    .byte %10000000, %01000000, %00100000, %00010000
>0e3e	08 04 02 01	    .byte %00001000, %00000100, %00000010, %00000001
.0e42			rowAddrL:
>0e42	00		    .byte 0
.0e43			rowAddrM:
>0e43	00		    .byte 0
.0e44			rowAddrH:
>0e44	00		    .byte 0
.0e45			colAddrL:
>0e45	00		    .byte 0
.0e46			vertical_line:
.0e46	a5 04		    lda r1L
.0e48	85 16		    sta r10L
.0e4a	a5 05		    lda r1H
.0e4c	85 17		    sta r10H
.0e4e	a5 06		    lda r2L
.0e50	85 18		    sta r11L
.0e52	a5 07		    lda r2H
.0e54	85 19		    sta r11H
.0e56			loop:
.0e56	a5 16		    lda r10L
.0e58	85 04		    sta r1L
.0e5a	a5 17		    lda r10H
.0e5c	85 05		    sta r1H
.0e5e	20 e9 0d	    jsr set_pixel
.0e61	18		    clc
.0e62	a5 16		    lda r10L
.0e64	69 01		    adc #$01
.0e66	85 16		    sta r10L
.0e68	a5 17		    lda r10H
.0e6a	69 00		    adc #$00
.0e6c	85 17		    sta r10H
.0e6e	a5 17		    lda r10H
.0e70	c5 19		    cmp r11H
.0e72	d0 e2		    bne loop
.0e74	a5 16		    lda r10L
.0e76	c5 18		    cmp r11L
.0e78	d0 dc		    bne loop
.0e7a	60		    rts
.0e7b			horizontal_line:
.0e7b	a5 02		    lda r0L
.0e7d	85 16		    sta r10L
.0e7f	a5 03		    lda r0H
.0e81	85 17		    sta r10H
.0e83	a5 06		    lda r2L
.0e85	85 18		    sta r11L
.0e87	a5 07		    lda r2H
.0e89	85 19		    sta r11H
.0e8b			loop:
.0e8b	a5 16		    lda r10L
.0e8d	85 02		    sta r0L
.0e8f	a5 17		    lda r10H
.0e91	85 03		    sta r0H
.0e93	20 e9 0d	    jsr set_pixel
.0e96	18		    clc
.0e97	a5 16		    lda r10L
.0e99	69 01		    adc #$01
.0e9b	85 16		    sta r10L
.0e9d	a5 17		    lda r10H
.0e9f	69 00		    adc #$00
.0ea1	85 17		    sta r10H
.0ea3	a5 17		    lda r10H
.0ea5	c5 19		    cmp r11H
.0ea7	d0 e2		    bne loop
.0ea9	a5 16		    lda r10L
.0eab	c5 18		    cmp r11L
.0ead	d0 dc		    bne loop
.0eaf	60		    rts
.0eb0			rectangle:
.0eb0	a5 02		    lda r0L
.0eb2	8d 5d 0f	    sta tmp_r0
.0eb5	a5 03		    lda r0H
.0eb7	8d 5e 0f	    sta tmp_r0 + 1
.0eba	a5 04		    lda r1L
.0ebc	8d 5f 0f	    sta tmp_r1
.0ebf	a5 05		    lda r1H
.0ec1	8d 60 0f	    sta tmp_r1 + 1
.0ec4	a5 06		    lda r2L
.0ec6	8d 61 0f	    sta tmp_r2
.0ec9	a5 07		    lda r2H
.0ecb	8d 62 0f	    sta tmp_r2 + 1
.0ece	a5 08		    lda r3L
.0ed0	8d 63 0f	    sta tmp_r3
.0ed3	a5 09		    lda r3H
.0ed5	8d 64 0f	    sta tmp_r3 + 1
.0ed8	ad 5d 0f	    lda tmp_r0
.0edb	85 02		    sta r0L
.0edd	ad 5e 0f	    lda tmp_r0 + 1
.0ee0	85 03		    sta r0H
.0ee2	ad 5f 0f	    lda tmp_r1
.0ee5	85 04		    sta r1L
.0ee7	ad 60 0f	    lda tmp_r1 + 1
.0eea	85 05		    sta r1H
.0eec	ad 61 0f	    lda tmp_r2
.0eef	85 06		    sta r2L
.0ef1	ad 62 0f	    lda tmp_r2 + 1
.0ef4	85 07		    sta r2H
.0ef6	20 7b 0e	    jsr horizontal_line
.0ef9	ad 5d 0f	    lda tmp_r0
.0efc	85 02		    sta r0L
.0efe	ad 5e 0f	    lda tmp_r0 + 1
.0f01	85 03		    sta r0H
.0f03	ad 63 0f	    lda tmp_r3
.0f06	85 04		    sta r1L
.0f08	ad 64 0f	    lda tmp_r3 + 1
.0f0b	85 05		    sta r1H
.0f0d	ad 61 0f	    lda tmp_r2
.0f10	85 06		    sta r2L
.0f12	ad 62 0f	    lda tmp_r2 + 1
.0f15	85 07		    sta r2H
.0f17	20 7b 0e	    jsr horizontal_line
.0f1a	ad 5d 0f	    lda tmp_r0
.0f1d	85 02		    sta r0L
.0f1f	ad 5e 0f	    lda tmp_r0 + 1
.0f22	85 03		    sta r0H
.0f24	ad 5f 0f	    lda tmp_r1
.0f27	85 04		    sta r1L
.0f29	ad 60 0f	    lda tmp_r1 + 1
.0f2c	85 05		    sta r1H
.0f2e	ad 63 0f	    lda tmp_r3
.0f31	85 06		    sta r2L
.0f33	ad 64 0f	    lda tmp_r3 + 1
.0f36	85 07		    sta r2H
.0f38	20 46 0e	    jsr vertical_line
.0f3b	ad 61 0f	    lda tmp_r2
.0f3e	85 02		    sta r0L
.0f40	ad 62 0f	    lda tmp_r2 + 1
.0f43	85 03		    sta r0H
.0f45	ad 5f 0f	    lda tmp_r1
.0f48	85 04		    sta r1L
.0f4a	ad 60 0f	    lda tmp_r1 + 1
.0f4d	85 05		    sta r1H
.0f4f	ad 63 0f	    lda tmp_r3
.0f52	85 06		    sta r2L
.0f54	ad 64 0f	    lda tmp_r3 + 1
.0f57	85 07		    sta r2H
.0f59	20 46 0e	    jsr vertical_line
.0f5c	60		    rts
.0f5d			tmp_r0:
>0f5d	00 00		    .byte $00, $00
.0f5f			tmp_r1:
>0f5f	00 00		    .byte $00, $00
.0f61			tmp_r2:
>0f61	00 00		    .byte $00, $00
.0f63			tmp_r3:
>0f63	00 00		    .byte $00, $00
.0f65			draw_image:
.0f65			div_16bit_by_8:
.0f65	a5 02		    lda r0l             ; load x low byte
.0f67	85 0c		    sta r5l             ; store low byte in templ
.0f69	a5 03		    lda r0h             ; load x high byte
.0f6b	85 0d		    sta r5h             ; store high byte in temph
.0f6d	a2 03		    ldx #3              ; set loop counter to 3
.0f6f			shift_loop:
.0f6f	a5 0d		    lda r5h             ; load high byte
.0f71	4a		    lsr a               ; logical shift right
.0f72	85 0d		    sta r5h             ; store shifted high byte
.0f74	a5 0c		    lda r5l             ; load low byte
.0f76	6a		    ror a               ; rotate right through carry (bringing in bit from high byte)
.0f77	85 0c		    sta r5l             ; store shifted low byte
.0f79	ca		    dex                 ; decrement loop counter
.0f7a	d0 f3		    bne shift_loop      ; repeat 3 times
.0f7c	60		    rts                 ; return from subroutine
.0f7d			mult_16x16:
.0f7d	64 0c		    stz r5l
.0f7f	64 0d		    stz r5h
.0f81	a5 0a		    lda r4l    ; get the multiplicand and
.0f83	85 0c		    sta r5l    ; put it in the scratchpad.
.0f85	a5 0b		    lda r4h
.0f87	85 0d		    sta r5h
.0f89	a9 00		    lda #$00
.0f8b	85 0a		    sta r4l    ; zero-out the original multiplicand area.
.0f8d	85 0b		    sta r4h
.0f8f	a0 10		    ldy #$10   ; we'll loop 16 times.
.0f91			lp1:
.0f91	06 0a		    asl r4l    ; shift the entire 32 bits over one bit position.
.0f93	26 0b		    rol r4h
.0f95	26 08		    rol r3l
.0f97	26 09		    rol r3h
.0f99	90 13		    bcc lp2    ; skip the adding-in to the result if
.0f9b	18		    clc        ; else, add multiplier to intermediate result.
.0f9c	a5 0c		    lda r5l
.0f9e	65 0a		    adc r4l
.0fa0	85 0a		    sta r4l
.0fa2	a5 0d		    lda r5h
.0fa4	65 0b		    adc r4h
.0fa6	85 0b		    sta r4h
.0fa8	a9 00		    lda #$00   ; if c=1, incr lo byte of hi cell.
.0faa	65 08		    adc r3l
.0fac	85 08		    sta r3l
.0fae			lp2:
.0fae	88		    dey        ; if we haven't done 16 iterations yet,
.0faf	d0 e0		    bne lp1    ; then go around again.
.0fb1	60		    rts

;******  Return to file: ./src/x16_demo1.asm


;******  End of listing
