
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass --m65c02 -m -a -l ./target/x16_demo1.lbl -L ./target/x16_demo1.lst -o ./target/demo1 ./src/x16_demo1.asm
; Thu Jun 06 00:06:14 2024

;Offset	;Hex		;Source

;******  Processing input file: ./src/x16_demo1.asm


;******  Processing file: ./src/x16_regs.asm

=$02			r0	= $02
=$02			r0L	= $02
=$03			r0H	= $03
=$04			r1	= $04
=$04			r1L	= $04
=$05			r1H	= $05
=$06			r2	= $06
=$06			r2L	= $06
=$07			r2H	= $07
=$08			r3	= $08
=$08			r3L	= $08
=$09			r3H	= $09
=$0a			r4	= $0a
=$0a			r4L	= $0a
=$0b			r4H	= $0b
=$0c			r5	= $0c
=$0c			r5L	= $0c
=$0d			r5H	= $0d
=$0e			r6	= $0e
=$0e			r6L	= $0e
=$0f			r6H	= $0f
=$10			r7	= $10
=$10			r7L	= $10
=$11			r7H	= $11
=$12			r8	= $12
=$12			r8L	= $12
=$13			r8H	= $13
=$14			r9	= $14
=$14			r9L	= $14
=$15			r9H	= $15
=$16			r10	= $16
=$16			r10L	= $16
=$17			r10H	= $17
=$18			r11	= $18
=$18			r11L	= $18
=$19			r11H	= $19
=$1a			r12	= $1a
=$1a			r12L	= $1a
=$1b			r12H	= $1b
=$1c			r13	= $1c
=$1c			r13L	= $1c
=$1d			r13H	= $1d
=$1e			r14	= $1e
=$1e			r14L	= $1e
=$1f			r14H	= $1f
=$20			r15	= $20
=$20			r15L	= $20
=$21			r15H	= $21

;******  Return to file: ./src/x16_demo1.asm


;******  Processing file: ./src/x16_vera.asm

=$9f20			VERA_BASE           = $9f20
=$9f20			VERA_ADDRx_L        = $9f20
=$9f21			VERA_ADDRx_M        = $9f21
=$9f22			VERA_ADDRx_H        = $9f22
=$9f23			VERA_DATA0          = $9f23
=$9f24			VERA_DATA1          = $9f24
=$9f25			VERA_CTRL           = $9f25
=$9f26			VERA_IEN            = $9f26
=$9f27			VERA_ISR            = $9f27
=$9f28			VERA_IRQLINE_L      = $9f28 ; write only
=$9f28			VERA_SCANLINE_L     = $9f28 ; read only
=$9f29			VERA_DC_VIDEO       = $9f29     ; Active Display Control
=$9f2a			VERA_DC_HSCALE      = $9f2a     ; Active Display H-Scale
=$9f2b			VERA_DC_VSCALE      = $9f2b     ; Active Display V-Scale
=$9f2c			VERA_DC_BORDER      = $9f2c     ; Border Color
=$9f29			VERA_DC_HSTART      = $9f29     ; Active Display H-Start
=$9f2a			VERA_DC_HSTOP       = $9f2a     ; Active Display H-Stop
=$9f2b			VERA_DC_VSTART      = $9f2b     ; Active Display V-Start
=$9f2c			VERA_DC_VSTOP       = $9f2c     ; Active Display V-Stop
=$9f29			VERA_FX_CTRL        = $9f29     ; ADDR1 Update Mode / VRAM Data Port Write Mode
=$9f2a			VERA_FX_TILEBASE    = $9f2a     ; Affine Transformation Tile Base (write only)
=$9f2b			VERA_FX_MAPBASE     = $9f2b     ; Affine Transformation Map Base (write only)
=$9f2c			VERA_FX_MULT        = $9f2c     ; Write Cache Index / Multiply-accumulate Mode (write only)
=$9f29			VERA_FX_X_INCR_L    = $9f29     ; X Position Increment (lower 8 bits) (write only)
=$9f2a			VERA_FX_X_INCR_H    = $9f2a     ; X Position Increment (upper 8 bits) (write only)
=$9f2b			VERA_FX_Y_INCR_L    = $9f2b     ; Y Position Increment (lower 8 bits) (write only)
=$9f2c			VERA_FX_Y_INCR_H    = $9f2c     ; Y Position Increment (upper 8 bits) (write only)
=$9f29			VERA_FX_X_POS_L     = $9f29     ; Pixel X Position (lower 8 bits) (write only)
=$9f2a			VERA_FX_X_POS_H     = $9f2a     ; Pixel X Position (upper 3 bits) (write only)
=$9f2b			VERA_FX_Y_POS_L     = $9f2b     ; Pixel Y Position (lower 8 bits) (write only)
=$9f2c			VERA_FX_Y_POS_H     = $9f2c     ; Pixel Y Position (upper 3 bits) (write only)
=$9f29			VERA_FX_X_POS_S     = $9f29     ; Pixel X Fractional Position (upper 8 bits) (write only)
=$9f2a			VERA_FX_Y_POS_S     = $9f2a     ; Pixel Y Fractional Position (upper 8 bits) (write only)
=$9f2b			VERA_FX_POLY_FILL_L = $9f2b     ; Fill Length (lower 3 bits) (read only)
=$9f2c			VERA_FX_POLY_FILL_H = $9f2c     ; Fill Length (upper 7 bits) (read only)
=$9f29			VERA_FX_CACHE_L     = $9f29     ; 32-bit Write Cache Data  (write only)
=$9f29			VERA_FX_ACCUM_RESET = $9f29     ; (read only)
=$9f2a			VERA_FX_CACHE_M     = $9f2a     ; (write only)
=$9f2a			VERA_FX_ACCUM       = $9f2a     ; (read only)
=$9f2b			VERAFX_CACHE_H      = $9f2b     ; (write only)
=$9f2c			VERA_FX_CACHE_U     = $9f2c     ; (write only)
=$9f29			VERA_DC_VER0        = $9f29      ; Version Number (read only)
=$9f2a			VERA_DC_VER1        = $9f2a
=$9f2b			VERA_DC_VER2        = $9f2b
=$9f2c			VERA_DC_VER3        = $9f2c
=$9f2d			VERA_L0_CONFIG      = $9f2d
=$9f2e			VERA_L0_MAPBASE     = $9f2e
=$9f2f			VERA_L0_TILEBASE    = $9f2f
=$9f30			VERA_L0_HSCROLL_L   = $9f30
=$9f31			VERA_L0_HSCROLL_H   = $9f31
=$9f32			VERA_L0_VSCROLL_L   = $9f32
=$9f33			VERA_L0_VSCROLL_H   = $9f33
=$9f34			VERA_L1_CONFIG      = $9f34
=$9f35			VERA_L1_MAPBASE     = $9f35
=$9f36			VERA_L1_TILEBASE    = $9f36
=$9f37			VERA_L1_HSCROLL_L   = $9f37
=$9f38			VERA_L1_HSCROLL_H   = $9f38
=$9f39			VERA_L1_VSCROLL_L   = $9f39
=$9f3a			VERA_L1_VSCROLL_H   = $9f3a
=$9f3b			VERA_AUDIO_CTRL     = $9f3b
=$9f3c			VERA_AUDIO_RATE     = $9f3c
=$9f3d			VERA_AUDIO_DATA     = $9f3d
=$9f3e			VERA_SPI_DATA       = $9f3e
=$9f3f			VERA_SPI_CTRL       = $9f3f
=$ff81			CINT        = $ff81
=$ffb7			READST      = $ffb7
=$ffba			SETLFS      = $ffba
=$ffbd			SETNAM      = $ffbd
=$ffc0			OPEN        = $ffc0
=$ffc3			CLOSE       = $ffc3
=$ffc6			CHKIN       = $ffc6
=$ffc9			CHKOUT      = $ffc9
=$ffcf			CHRIN       = $FFCF
=$ffd2			CHROUT      = $ffd2
=$ffd5			LOAD        = $ffd5
=$ffd8			SAVE        = $ffd8
=$ffe7			CLALL       = $ffe7
=$ff90			SETMSG      = $ff90
=$ffa5			ACPTR       = $ffa5
=$ffa8			CIOUT       = $ffa8
=$ffab			UNTALK      = $ffab
=$ffae			UNLSN       = $ffae
=$ffb1			LISTEN      = $ffb1
=$ffb4			TALK        = $ffb4
=$ff93			SECOND      = $ff93
=$ff96			TALKSA      = $ff96
=$ffcc			CLRCHN      = $ffcc
=$ffe4			GETIN       = $ffe4
=$ff5f			SCREEN_MODE = $ff5f
=$0287			STATUS      = $0287

;******  Return to file: ./src/x16_demo1.asm


;******  Processing file: ./src/x16_macros.asm


;******  Return to file: ./src/x16_demo1.asm

>0801	0c 08		.byte $0C, $08  ; pointer to next line
>0803	0a 00		.byte $0A, $00  ; line number (10)
>0805	9e		.byte $9E       ; SYS token
>0806	20 32 30 36	.text " 2062"   ; SYS address in ASCII
>080a	32
>080b	00 00 00	.byte 0, 0, 0   ; end-of-program
.080e	20 77 0d	    jsr screen_hires
.0811	20 8c 0d	    jsr screen_clear
.0814	a9 40		    lda #<($140)
.0816	85 02		    sta r0
.0818	a9 01		    lda #>$140
.081a	85 03		    sta r0 + 1
.081c	a9 00		    lda #<($0)
.081e	85 04		    sta r1
.0820	a9 00		    lda #>$0
.0822	85 05		    sta r1 + 1
.0824	a9 e0		    lda #<($1e0)
.0826	85 06		    sta r2
.0828	a9 01		    lda #>$1e0
.082a	85 07		    sta r2 + 1
.082c	20 40 0e	    jsr vertical_line
.082f	a9 00		    lda #<($0)
.0831	85 02		    sta r0
.0833	a9 00		    lda #>$0
.0835	85 03		    sta r0 + 1
.0837	a9 f0		    lda #<($f0)
.0839	85 04		    sta r1
.083b	a9 00		    lda #>$f0
.083d	85 05		    sta r1 + 1
.083f	a9 80		    lda #<($280)
.0841	85 06		    sta r2
.0843	a9 02		    lda #>$280
.0845	85 07		    sta r2 + 1
.0847	20 75 0e	    jsr horizontal_line
.084a	20 84 09	    jsr wait_key
.084d	20 8c 0d	    jsr screen_clear
.0850	a9 00		    lda #<0
.0852	85 02		    sta r0L
.0854	a9 00		    lda #>0
.0856	85 03		    sta r0H
.0858	a9 00		    lda #<0
.085a	85 04		    sta r1L
.085c	a9 00		    lda #>0
.085e	85 05		    sta r1H
.0860	a9 ae		    lda #<430
.0862	85 06		    sta r2L
.0864	a9 01		    lda #>430
.0866	85 07		    sta r2H
.0868	a9 14		    lda #<20
.086a	85 08		    sta r3L
.086c	a9 00		    lda #>20
.086e	85 09		    sta r3H
.0870	20 aa 0e	    jsr rectangle
.0873	a9 e0		    lda #<480
.0875	85 02		    sta r0L
.0877	a9 01		    lda #>480
.0879	85 03		    sta r0H
.087b	a9 00		    lda #<0
.087d	85 04		    sta r1L
.087f	a9 00		    lda #>0
.0881	85 05		    sta r1H
.0883	a9 7f		    lda #<639
.0885	85 06		    sta r2L
.0887	a9 02		    lda #>639
.0889	85 07		    sta r2H
.088b	a9 14		    lda #<20
.088d	85 08		    sta r3L
.088f	a9 00		    lda #>20
.0891	85 09		    sta r3H
.0893	20 aa 0e	    jsr rectangle
.0896	a9 14		    lda #<20
.0898	85 02		    sta r0L
.089a	a9 00		    lda #>20
.089c	85 03		    sta r0H
.089e	a9 28		    lda #<40
.08a0	85 04		    sta r1L
.08a2	a9 00		    lda #>40
.08a4	85 05		    sta r1H
.08a6	a9 f4		    lda #<500
.08a8	85 06		    sta r2L
.08aa	a9 01		    lda #>500
.08ac	85 07		    sta r2H
.08ae	a9 5e		    lda #<350
.08b0	85 08		    sta r3L
.08b2	a9 01		    lda #>350
.08b4	85 09		    sta r3H
.08b6	20 aa 0e	    jsr rectangle
.08b9	a9 14		    lda #<20
.08bb	85 02		    sta r0L
.08bd	a9 00		    lda #>20
.08bf	85 03		    sta r0H
.08c1	a9 28		    lda #<40
.08c3	85 04		    sta r1L
.08c5	a9 00		    lda #>40
.08c7	85 05		    sta r1H
.08c9	a9 f4		    lda #<500
.08cb	85 06		    sta r2L
.08cd	a9 01		    lda #>500
.08cf	85 07		    sta r2H
.08d1	a9 50		    lda #<80
.08d3	85 08		    sta r3L
.08d5	a9 00		    lda #>80
.08d7	85 09		    sta r3H
.08d9	20 aa 0e	    jsr rectangle
.08dc	a9 14		    lda #<20
.08de	85 02		    sta r0L
.08e0	a9 00		    lda #>20
.08e2	85 03		    sta r0H
.08e4	a9 2c		    lda #<44
.08e6	85 04		    sta r1L
.08e8	a9 00		    lda #>44
.08ea	85 05		    sta r1H
.08ec	a9 f4		    lda #<500
.08ee	85 06		    sta r2L
.08f0	a9 01		    lda #>500
.08f2	85 07		    sta r2H
.08f4	20 75 0e	    jsr horizontal_line
.08f7	a9 14		    lda #<20
.08f9	85 02		    sta r0L
.08fb	a9 00		    lda #>20
.08fd	85 03		    sta r0H
.08ff	a9 30		    lda #<48
.0901	85 04		    sta r1L
.0903	a9 00		    lda #>48
.0905	85 05		    sta r1H
.0907	a9 f4		    lda #<500
.0909	85 06		    sta r2L
.090b	a9 01		    lda #>500
.090d	85 07		    sta r2H
.090f	20 75 0e	    jsr horizontal_line
.0912	a9 14		    lda #<20
.0914	85 02		    sta r0L
.0916	a9 00		    lda #>20
.0918	85 03		    sta r0H
.091a	a9 34		    lda #<52
.091c	85 04		    sta r1L
.091e	a9 00		    lda #>52
.0920	85 05		    sta r1H
.0922	a9 f4		    lda #<500
.0924	85 06		    sta r2L
.0926	a9 01		    lda #>500
.0928	85 07		    sta r2H
.092a	20 75 0e	    jsr horizontal_line
.092d	a9 14		    lda #<20
.092f	85 02		    sta r0L
.0931	a9 00		    lda #>20
.0933	85 03		    sta r0H
.0935	a9 38		    lda #<56
.0937	85 04		    sta r1L
.0939	a9 00		    lda #>56
.093b	85 05		    sta r1H
.093d	a9 f4		    lda #<500
.093f	85 06		    sta r2L
.0941	a9 01		    lda #>500
.0943	85 07		    sta r2H
.0945	20 75 0e	    jsr horizontal_line
.0948	a9 14		    lda #<20
.094a	85 02		    sta r0L
.094c	a9 00		    lda #>20
.094e	85 03		    sta r0H
.0950	a9 3c		    lda #<60
.0952	85 04		    sta r1L
.0954	a9 00		    lda #>60
.0956	85 05		    sta r1H
.0958	a9 f4		    lda #<500
.095a	85 06		    sta r2L
.095c	a9 01		    lda #>500
.095e	85 07		    sta r2H
.0960	20 75 0e	    jsr horizontal_line
.0963	a9 14		    lda #<20
.0965	85 02		    sta r0L
.0967	a9 00		    lda #>20
.0969	85 03		    sta r0H
.096b	a9 5a		    lda #<346
.096d	85 04		    sta r1L
.096f	a9 01		    lda #>346
.0971	85 05		    sta r1H
.0973	a9 f4		    lda #<500
.0975	85 06		    sta r2L
.0977	a9 01		    lda #>500
.0979	85 07		    sta r2H
.097b	20 75 0e	    jsr horizontal_line
.097e	20 84 09	    jsr wait_key
.0981	4c 8a 09	    jmp exit
.0984			wait_key:
.0984	20 e4 ff	    jsr GETIN
.0987	f0 fb		    beq wait_key
.0989	60		    rts
.098a			exit:
.098a	20 81 ff	    jsr CINT
.098d	60		    rts

;******  Processing file: ./src/x16_font.asm

.098e			vwfont:
>098e	04 07 00 00	.byte $04, $07, $00, $00, $00, $00, $00, $00, $00, $00, $00       ; // space
>0992	00 00 00 00 00 00 00
>0999	01 07 00 80	.byte $01, $07, $00, $80, $80, $80, $80, $00, $80, $80, $00       ; // !
>099d	80 80 80 00 80 80 00
>09a4	03 02 00 a0	.byte $03, $02, $00, $A0, $A0, $00, $00, $00, $00, $00, $00       ; // "
>09a8	a0 00 00 00 00 00 00
>09af	05 07 00 50	.byte $05, $07, $00, $50, $50, $F8, $50, $F8, $50, $50, $00       ; // #
>09b3	50 f8 50 f8 50 50 00
>09ba	05 08 00 78	.byte $05, $08, $00, $78, $A0, $60, $20, $30, $28, $F0, $20       ; // $
>09be	a0 60 20 30 28 f0 20
>09c5	05 07 00 c0	.byte $05, $07, $00, $C0, $C8, $10, $20, $40, $98, $18, $00       ; // %
>09c9	c8 10 20 40 98 18 00
>09d0	05 07 00 60	.byte $05, $07, $00, $60, $80, $90, $78, $90, $90, $70, $00       ; // &
>09d4	80 90 78 90 90 70 00
>09db	02 07 00 40	.byte $02, $07, $00, $40, $40, $80, $00, $00, $00, $00, $00       ; // '
>09df	40 80 00 00 00 00 00
>09e6	03 08 01 20	.byte $03, $08, $01, $20, $40, $80, $80, $80, $80, $40, $20       ; // (
>09ea	40 80 80 80 80 40 20
>09f1	03 08 01 80	.byte $03, $08, $01, $80, $40, $20, $20, $20, $20, $40, $80       ; // )
>09f5	40 20 20 20 20 40 80
>09fc	05 07 00 20	.byte $05, $07, $00, $20, $A8, $70, $F8, $70, $A8, $20, $00       ; // *
>0a00	a8 70 f8 70 a8 20 00
>0a07	05 07 00 00	.byte $05, $07, $00, $00, $20, $20, $F8, $20, $20, $00, $00       ; // +
>0a0b	20 20 f8 20 20 00 00
>0a12	02 02 01 40	.byte $02, $02, $01, $40, $80, $00, $00, $00, $00, $00, $00       ; // ,
>0a16	80 00 00 00 00 00 00
>0a1d	04 07 00 00	.byte $04, $07, $00, $00, $00, $00, $F0, $00, $00, $00, $00       ; // -
>0a21	00 00 f0 00 00 00 00
>0a28	01 01 00 80	.byte $01, $01, $00, $80, $00, $00, $00, $00, $00, $00, $00       ; // .
>0a2c	00 00 00 00 00 00 00
>0a33	06 07 00 00	.byte $06, $07, $00, $00, $04, $08, $10, $20, $40, $80, $00       ; // /
>0a37	04 08 10 20 40 80 00
>0a3e	04 07 00 60	.byte $04, $07, $00, $60, $90, $B0, $D0, $90, $90, $60, $00       ; // 0
>0a42	90 b0 d0 90 90 60 00
>0a49	02 07 00 40	.byte $02, $07, $00, $40, $C0, $40, $40, $40, $40, $40, $00       ; // 1
>0a4d	c0 40 40 40 40 40 00
>0a54	03 07 00 c0	.byte $03, $07, $00, $C0, $20, $20, $40, $80, $80, $E0, $00       ; // 2
>0a58	20 20 40 80 80 e0 00
>0a5f	03 07 00 c0	.byte $03, $07, $00, $C0, $20, $20, $40, $20, $20, $C0, $00       ; // 3
>0a63	20 20 40 20 20 c0 00
>0a6a	04 07 00 10	.byte $04, $07, $00, $10, $30, $50, $90, $F0, $10, $10, $00       ; // 4
>0a6e	30 50 90 f0 10 10 00
>0a75	03 07 00 e0	.byte $03, $07, $00, $E0, $80, $C0, $20, $20, $20, $C0, $00       ; // 5
>0a79	80 c0 20 20 20 c0 00
>0a80	04 07 00 20	.byte $04, $07, $00, $20, $40, $80, $E0, $90, $90, $60, $00       ; // 6
>0a84	40 80 e0 90 90 60 00
>0a8b	04 07 00 f0	.byte $04, $07, $00, $F0, $10, $20, $40, $40, $40, $40, $00       ; // 7
>0a8f	10 20 40 40 40 40 00
>0a96	04 07 00 60	.byte $04, $07, $00, $60, $90, $90, $60, $90, $90, $60, $00       ; // 8
>0a9a	90 90 60 90 90 60 00
>0aa1	04 07 00 60	.byte $04, $07, $00, $60, $90, $90, $70, $10, $20, $40, $00       ; // 9
>0aa5	90 90 70 10 20 40 00
>0aac	01 04 00 80	.byte $01, $04, $00, $80, $00, $00, $80, $00, $00, $00, $00       ; // :
>0ab0	00 00 80 00 00 00 00
>0ab7	02 05 01 40	.byte $02, $05, $01, $40, $00, $00, $40, $80, $00, $00, $00       ; // ;
>0abb	00 00 40 80 00 00 00
>0ac2	03 06 00 00	.byte $03, $06, $00, $00, $20, $40, $80, $40, $20, $00, $00       ; // <
>0ac6	20 40 80 40 20 00 00
>0acd	04 06 00 00	.byte $04, $06, $00, $00, $F0, $00, $F0, $00, $00, $00, $00       ; // =
>0ad1	f0 00 f0 00 00 00 00
>0ad8	03 06 00 00	.byte $03, $06, $00, $00, $80, $40, $20, $40, $80, $00, $00       ; // >
>0adc	80 40 20 40 80 00 00
>0ae3	05 07 00 70	.byte $05, $07, $00, $70, $88, $10, $20, $20, $00, $20, $00       ; // ?
>0ae7	88 10 20 20 00 20 00
>0aee	05 07 00 70	.byte $05, $07, $00, $70, $88, $B8, $A8, $B8, $80, $70, $00       ; // @
>0af2	88 b8 a8 b8 80 70 00
>0af9	04 05 00 70	.byte $04, $05, $00, $70, $90, $90, $90, $50, $00, $00, $00       ; // a
>0afd	90 90 90 50 00 00 00
>0b04	04 07 00 80	.byte $04, $07, $00, $80, $80, $E0, $90, $90, $90, $E0, $00       ; // b
>0b08	80 e0 90 90 90 e0 00
>0b0f	04 05 00 60	.byte $04, $05, $00, $60, $90, $80, $80, $70, $00, $00, $00       ; // c
>0b13	90 80 80 70 00 00 00
>0b1a	04 07 00 10	.byte $04, $07, $00, $10, $10, $70, $90, $90, $90, $70, $00       ; // d
>0b1e	10 70 90 90 90 70 00
>0b25	04 05 00 60	.byte $04, $05, $00, $60, $90, $F0, $80, $70, $00, $00, $00       ; // e
>0b29	90 f0 80 70 00 00 00
>0b30	02 07 00 40	.byte $02, $07, $00, $40, $80, $C0, $80, $80, $80, $80, $00       ; // f
>0b34	80 c0 80 80 80 80 00
>0b3b	04 07 02 70	.byte $04, $07, $02, $70, $90, $90, $90, $70, $10, $20, $00       ; // g
>0b3f	90 90 90 70 10 20 00
>0b46	04 07 00 80	.byte $04, $07, $00, $80, $80, $E0, $90, $90, $90, $90, $00       ; // h
>0b4a	80 e0 90 90 90 90 00
>0b51	01 07 00 80	.byte $01, $07, $00, $80, $00, $80, $80, $80, $80, $80, $00       ; // i
>0b55	00 80 80 80 80 80 00
>0b5c	02 07 02 40	.byte $02, $07, $02, $40, $00, $40, $40, $40, $40, $80, $00       ; // j
>0b60	00 40 40 40 40 80 00
>0b67	04 07 00 80	.byte $04, $07, $00, $80, $80, $90, $A0, $C0, $A0, $90, $00       ; // k
>0b6b	80 90 a0 c0 a0 90 00
>0b72	01 07 00 80	.byte $01, $07, $00, $80, $80, $80, $80, $80, $80, $80, $00       ; // l
>0b76	80 80 80 80 80 80 00
>0b7d	07 05 00 ec	.byte $07, $05, $00, $EC, $92, $92, $92, $92, $00, $00, $00       ; // m
>0b81	92 92 92 92 00 00 00
>0b88	04 05 00 e0	.byte $04, $05, $00, $E0, $90, $90, $90, $90, $00, $00, $00       ; // n
>0b8c	90 90 90 90 00 00 00
>0b93	05 05 00 70	.byte $05, $05, $00, $70, $88, $88, $88, $70, $00, $00, $00       ; // o
>0b97	88 88 88 70 00 00 00
>0b9e	04 07 02 e0	.byte $04, $07, $02, $E0, $90, $90, $90, $E0, $80, $80, $00       ; // p
>0ba2	90 90 90 e0 80 80 00
>0ba9	04 07 02 70	.byte $04, $07, $02, $70, $90, $90, $90, $70, $10, $10, $00       ; // q
>0bad	90 90 90 70 10 10 00
>0bb4	02 05 00 40	.byte $02, $05, $00, $40, $80, $80, $80, $80, $00, $00, $00       ; // r
>0bb8	80 80 80 80 00 00 00
>0bbf	03 05 00 60	.byte $03, $05, $00, $60, $80, $40, $20, $C0, $00, $00, $00       ; // s
>0bc3	80 40 20 c0 00 00 00
>0bca	02 07 00 80	.byte $02, $07, $00, $80, $C0, $80, $80, $80, $80, $40, $00       ; // t
>0bce	c0 80 80 80 80 40 00
>0bd5	04 05 00 90	.byte $04, $05, $00, $90, $90, $90, $90, $70, $00, $00, $00       ; // u
>0bd9	90 90 90 70 00 00 00
>0be0	05 05 00 88	.byte $05, $05, $00, $88, $88, $88, $50, $20, $00, $00, $00       ; // v
>0be4	88 88 50 20 00 00 00
>0beb	07 05 00 92	.byte $07, $05, $00, $92, $92, $92, $92, $6C, $00, $00, $00       ; // w
>0bef	92 92 92 6c 00 00 00
>0bf6	05 05 00 88	.byte $05, $05, $00, $88, $50, $20, $50, $88, $00, $00, $00       ; // x
>0bfa	50 20 50 88 00 00 00
>0c01	04 07 02 90	.byte $04, $07, $02, $90, $90, $90, $90, $70, $10, $20, $00       ; // y
>0c05	90 90 90 70 10 20 00
>0c0c	04 05 00 f0	.byte $04, $05, $00, $F0, $20, $40, $80, $F0, $00, $00, $00       ; // z
>0c10	20 40 80 f0 00 00 00
>0c17	02 07 00 c0	.byte $02, $07, $00, $C0, $80, $80, $80, $80, $80, $C0, $00       ; // [
>0c1b	80 80 80 80 80 c0 00
>0c22	07 07 00 80	.byte $07, $07, $00, $80, $40, $20, $10, $08, $04, $02, $00       ; // slash
>0c26	40 20 10 08 04 02 00
>0c2d	02 07 00 c0	.byte $02, $07, $00, $C0, $40, $40, $40, $40, $40, $C0, $00       ; // ]
>0c31	40 40 40 40 40 c0 00
>0c38	05 07 00 20	.byte $05, $07, $00, $20, $50, $88, $00, $00, $00, $00, $00       ; // ^
>0c3c	50 88 00 00 00 00 00
>0c43	05 01 00 f8	.byte $05, $01, $00, $F8, $00, $00, $00, $00, $00, $00, $00       ; // _
>0c47	00 00 00 00 00 00 00
>0c4e	02 07 00 80	.byte $02, $07, $00, $80, $80, $40, $00, $00, $00, $00, $00       ; // `
>0c52	80 40 00 00 00 00 00
>0c59	05 07 00 20	.byte $05, $07, $00, $20, $50, $88, $88, $F8, $88, $88, $00       ; // A
>0c5d	50 88 88 f8 88 88 00
>0c64	04 07 00 e0	.byte $04, $07, $00, $E0, $90, $90, $E0, $90, $90, $E0, $00       ; // B
>0c68	90 90 e0 90 90 e0 00
>0c6f	04 07 00 60	.byte $04, $07, $00, $60, $90, $80, $80, $80, $80, $70, $00       ; // C
>0c73	90 80 80 80 80 70 00
>0c7a	04 07 00 e0	.byte $04, $07, $00, $E0, $90, $90, $90, $90, $90, $E0, $00       ; // D
>0c7e	90 90 90 90 90 e0 00
>0c85	03 07 00 e0	.byte $03, $07, $00, $E0, $80, $80, $E0, $80, $80, $E0, $00       ; // E
>0c89	80 80 e0 80 80 e0 00
>0c90	03 07 00 e0	.byte $03, $07, $00, $E0, $80, $80, $E0, $80, $80, $80, $00       ; // F
>0c94	80 80 e0 80 80 80 00
>0c9b	04 07 00 60	.byte $04, $07, $00, $60, $90, $80, $80, $B0, $90, $70, $00       ; // G
>0c9f	90 80 80 b0 90 70 00
>0ca6	05 07 00 88	.byte $05, $07, $00, $88, $88, $88, $F8, $88, $88, $88, $00       ; // H
>0caa	88 88 f8 88 88 88 00
>0cb1	01 07 00 80	.byte $01, $07, $00, $80, $80, $80, $80, $80, $80, $80, $00       ; // I
>0cb5	80 80 80 80 80 80 00
>0cbc	03 07 00 20	.byte $03, $07, $00, $20, $20, $20, $20, $20, $20, $C0, $00       ; // J
>0cc0	20 20 20 20 20 c0 00
>0cc7	05 07 00 88	.byte $05, $07, $00, $88, $90, $A0, $C0, $A0, $90, $88, $00       ; // K
>0ccb	90 a0 c0 a0 90 88 00
>0cd2	03 07 00 80	.byte $03, $07, $00, $80, $80, $80, $80, $80, $80, $E0, $00       ; // L
>0cd6	80 80 80 80 80 e0 00
>0cdd	07 07 00 82	.byte $07, $07, $00, $82, $C6, $AA, $92, $82, $82, $82, $00       ; // M
>0ce1	c6 aa 92 82 82 82 00
>0ce8	05 07 00 88	.byte $05, $07, $00, $88, $C8, $A8, $98, $88, $88, $88, $00       ; // N
>0cec	c8 a8 98 88 88 88 00
>0cf3	05 07 00 70	.byte $05, $07, $00, $70, $88, $88, $88, $88, $88, $70, $00       ; // O
>0cf7	88 88 88 88 88 70 00
>0cfe	04 07 00 e0	.byte $04, $07, $00, $E0, $90, $90, $90, $E0, $80, $80, $00       ; // P
>0d02	90 90 90 e0 80 80 00
>0d09	05 08 01 70	.byte $05, $08, $01, $70, $88, $88, $88, $88, $98, $78, $04       ; // Q
>0d0d	88 88 88 88 98 78 04
>0d14	04 07 00 e0	.byte $04, $07, $00, $E0, $90, $90, $90, $E0, $A0, $90, $00       ; // R
>0d18	90 90 90 e0 a0 90 00
>0d1f	04 07 00 70	.byte $04, $07, $00, $70, $80, $C0, $20, $10, $10, $E0, $00       ; // S
>0d23	80 c0 20 10 10 e0 00
>0d2a	03 07 00 e0	.byte $03, $07, $00, $E0, $40, $40, $40, $40, $40, $40, $00       ; // T
>0d2e	40 40 40 40 40 40 00
>0d35	04 07 00 90	.byte $04, $07, $00, $90, $90, $90, $90, $90, $90, $70, $00       ; // U
>0d39	90 90 90 90 90 70 00
>0d40	05 07 00 88	.byte $05, $07, $00, $88, $88, $88, $88, $88, $50, $20, $00       ; // V
>0d44	88 88 88 88 50 20 00
>0d4b	07 07 00 82	.byte $07, $07, $00, $82, $82, $82, $92, $AA, $C6, $82, $00       ; // W
>0d4f	82 82 92 aa c6 82 00
>0d56	05 07 00 88	.byte $05, $07, $00, $88, $88, $50, $20, $50, $88, $88, $00       ; // X
>0d5a	88 50 20 50 88 88 00
>0d61	05 07 00 88	.byte $05, $07, $00, $88, $88, $88, $50, $20, $20, $20, $00       ; // Y
>0d65	88 88 50 20 20 20 00
>0d6c	07 07 00 f8	.byte $07, $07, $00, $F8, $08, $10, $20, $40, $80, $F8, $00       ; // Z
>0d70	08 10 20 40 80 f8 00

;******  Return to file: ./src/x16_demo1.asm


;******  Processing file: ./src/x16_hireslib.asm

.0d77			screen_hires:
.0d77	a9 00		    lda #%00000000      ; DCSEL = 0, VRAM port 1
.0d79	8d 25 9f	    sta VERA_CTRL
.0d7c	a9 21		    lda #%00100001
.0d7e	8d 29 9f	    sta VERA_DC_VIDEO
.0d81	a9 04		    lda #%00000100
.0d83	8d 34 9f	    sta VERA_L1_CONFIG
.0d86	a9 01		    lda #%00000001
.0d88	8d 36 9f	    sta VERA_L1_TILEBASE
.0d8b	60		    rts
.0d8c			screen_clear:
.0d8c	a9 04		    lda #(2 << 1)
.0d8e	8d 25 9f	    sta VERA_CTRL
.0d91	a9 40		    lda #$40
.0d93	0c 29 9f	    tsb VERA_FX_CTRL
.0d96	a9 0c		    lda #(6 << 1)
.0d98	8d 25 9f	    sta VERA_CTRL
.0d9b	9c 29 9f	    stz $9f29
.0d9e	9c 2a 9f	    stz $9f2a
.0da1	9c 2b 9f	    stz $9f2b
.0da4	9c 2c 9f	    stz $9f2c
.0da7	9c 25 9f	    stz VERA_CTRL
.0daa	9c 20 9f	    stz VERA_ADDRx_L
.0dad	9c 21 9f	    stz VERA_ADDRx_M
.0db0	a9 30		    lda #$30  ; increment +4
.0db2	8d 22 9f	    sta VERA_ADDRx_H
.0db5	a0 f0		    ldy #240 ; number of rows
.0db7			blank_outer:
.0db7	a2 0a		    ldx #10 ; 10 iterations of 32 = one line of 320 at 8bpp
.0db9			blank_loop:
.0db9	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dbc	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dbf	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dc2	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dc5	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dc8	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dcb	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dce	9c 23 9f	    stz VERA_DATA0 ; $9f23 each `stz` writes four zeroes to VRAM (cache contents) for a total of 32 pixels when repeated 8x
.0dd1	ca		    dex
.0dd2	d0 e5		    bne blank_loop
.0dd4	88		    dey
.0dd5	d0 e0		    bne blank_outer
.0dd7	a9 04		    lda #(2 << 1)
.0dd9	8d 25 9f	    sta VERA_CTRL ; $9f25
.0ddc	9c 29 9f	    stz VERA_FX_CTRL
.0ddf	9c 25 9f	    stz VERA_CTRL
.0de2	60		    rts
.0de3			set_pixel:
.0de3	a5 04		    lda r1L             ; Load y low byte
.0de5	85 08		    sta r3L
.0de7	a5 05		    lda r1H
.0de9	85 09		    sta r3H
.0deb	a9 50		    lda #$50            ; x 80
.0ded	85 0a		    sta r4L
.0def	a9 00		    lda #$00
.0df1	85 0b		    sta r4H
.0df3	20 77 0f	    jsr mult_16x16      ; Multiply by 80
.0df6	a5 0a		    lda r4L
.0df8	8d 3c 0e	    sta rowAddrL        ; Store row address low byte
.0dfb	a5 0b		    lda r4H
.0dfd	8d 3d 0e	    sta rowAddrM
.0e00	a5 08		    lda r3L             ; Load high byte result
.0e02	8d 3e 0e	    sta rowAddrH        ; Store row address high byte
.0e05	20 5f 0f	    jsr div_16bit_by_8
.0e08	a5 0c		    lda r5L
.0e0a	8d 3f 0e	    sta colAddrL
.0e0d	a5 02		    lda r0L             ; Load x low byte
.0e0f	29 07		    and #7              ; x % 8 (AND with 7)
.0e11	aa		    tax                 ; Transfer to X for index
.0e12	18		    clc
.0e13	ad 3c 0e	    lda rowAddrL
.0e16	6d 3f 0e	    adc colAddrL
.0e19	8d 20 9f	    sta VERA_ADDRx_L
.0e1c	ad 3d 0e	    lda rowAddrM
.0e1f	69 00		    adc #$00
.0e21	8d 21 9f	    sta VERA_ADDRx_M
.0e24	ad 3e 0e	    lda rowAddrH
.0e27	8d 22 9f	    sta VERA_ADDRx_H
.0e2a	ad 23 9f	    lda VERA_DATA0      ; Load the byte at memory address
.0e2d	1d 34 0e	    ora bitMasks,X      ; OR with the bit mask
.0e30	8d 23 9f	    sta VERA_DATA0      ; Store back the modified byte
.0e33	60		    rts
.0e34			bitMasks:
>0e34	80 40 20 10	    .byte %10000000, %01000000, %00100000, %00010000
>0e38	08 04 02 01	    .byte %00001000, %00000100, %00000010, %00000001
.0e3c			rowAddrL:
>0e3c	00		    .byte 0
.0e3d			rowAddrM:
>0e3d	00		    .byte 0
.0e3e			rowAddrH:
>0e3e	00		    .byte 0
.0e3f			colAddrL:
>0e3f	00		    .byte 0
.0e40			vertical_line:
.0e40	a5 04		    lda r1L
.0e42	85 16		    sta r10L
.0e44	a5 05		    lda r1H
.0e46	85 17		    sta r10H
.0e48	a5 06		    lda r2L
.0e4a	85 18		    sta r11L
.0e4c	a5 07		    lda r2H
.0e4e	85 19		    sta r11H
.0e50			loop:
.0e50	a5 16		    lda r10L
.0e52	85 04		    sta r1L
.0e54	a5 17		    lda r10H
.0e56	85 05		    sta r1H
.0e58	20 e3 0d	    jsr set_pixel
.0e5b	18		    clc
.0e5c	a5 16		    lda r10L
.0e5e	69 01		    adc #$01
.0e60	85 16		    sta r10L
.0e62	a5 17		    lda r10H
.0e64	69 00		    adc #$00
.0e66	85 17		    sta r10H
.0e68	a5 17		    lda r10H
.0e6a	c5 19		    cmp r11H
.0e6c	d0 e2		    bne loop
.0e6e	a5 16		    lda r10L
.0e70	c5 18		    cmp r11L
.0e72	d0 dc		    bne loop
.0e74	60		    rts
.0e75			horizontal_line:
.0e75	a5 02		    lda r0L
.0e77	85 16		    sta r10L
.0e79	a5 03		    lda r0H
.0e7b	85 17		    sta r10H
.0e7d	a5 06		    lda r2L
.0e7f	85 18		    sta r11L
.0e81	a5 07		    lda r2H
.0e83	85 19		    sta r11H
.0e85			loop:
.0e85	a5 16		    lda r10L
.0e87	85 02		    sta r0L
.0e89	a5 17		    lda r10H
.0e8b	85 03		    sta r0H
.0e8d	20 e3 0d	    jsr set_pixel
.0e90	18		    clc
.0e91	a5 16		    lda r10L
.0e93	69 01		    adc #$01
.0e95	85 16		    sta r10L
.0e97	a5 17		    lda r10H
.0e99	69 00		    adc #$00
.0e9b	85 17		    sta r10H
.0e9d	a5 17		    lda r10H
.0e9f	c5 19		    cmp r11H
.0ea1	d0 e2		    bne loop
.0ea3	a5 16		    lda r10L
.0ea5	c5 18		    cmp r11L
.0ea7	d0 dc		    bne loop
.0ea9	60		    rts
.0eaa			rectangle:
.0eaa	a5 02		    lda r0L
.0eac	8d 57 0f	    sta tmp_r0
.0eaf	a5 03		    lda r0H
.0eb1	8d 58 0f	    sta tmp_r0 + 1
.0eb4	a5 04		    lda r1L
.0eb6	8d 59 0f	    sta tmp_r1
.0eb9	a5 05		    lda r1H
.0ebb	8d 5a 0f	    sta tmp_r1 + 1
.0ebe	a5 06		    lda r2L
.0ec0	8d 5b 0f	    sta tmp_r2
.0ec3	a5 07		    lda r2H
.0ec5	8d 5c 0f	    sta tmp_r2 + 1
.0ec8	a5 08		    lda r3L
.0eca	8d 5d 0f	    sta tmp_r3
.0ecd	a5 09		    lda r3H
.0ecf	8d 5e 0f	    sta tmp_r3 + 1
.0ed2	ad 57 0f	    lda tmp_r0
.0ed5	85 02		    sta r0L
.0ed7	ad 58 0f	    lda tmp_r0 + 1
.0eda	85 03		    sta r0H
.0edc	ad 59 0f	    lda tmp_r1
.0edf	85 04		    sta r1L
.0ee1	ad 5a 0f	    lda tmp_r1 + 1
.0ee4	85 05		    sta r1H
.0ee6	ad 5b 0f	    lda tmp_r2
.0ee9	85 06		    sta r2L
.0eeb	ad 5c 0f	    lda tmp_r2 + 1
.0eee	85 07		    sta r2H
.0ef0	20 75 0e	    jsr horizontal_line
.0ef3	ad 57 0f	    lda tmp_r0
.0ef6	85 02		    sta r0L
.0ef8	ad 58 0f	    lda tmp_r0 + 1
.0efb	85 03		    sta r0H
.0efd	ad 5d 0f	    lda tmp_r3
.0f00	85 04		    sta r1L
.0f02	ad 5e 0f	    lda tmp_r3 + 1
.0f05	85 05		    sta r1H
.0f07	ad 5b 0f	    lda tmp_r2
.0f0a	85 06		    sta r2L
.0f0c	ad 5c 0f	    lda tmp_r2 + 1
.0f0f	85 07		    sta r2H
.0f11	20 75 0e	    jsr horizontal_line
.0f14	ad 57 0f	    lda tmp_r0
.0f17	85 02		    sta r0L
.0f19	ad 58 0f	    lda tmp_r0 + 1
.0f1c	85 03		    sta r0H
.0f1e	ad 59 0f	    lda tmp_r1
.0f21	85 04		    sta r1L
.0f23	ad 5a 0f	    lda tmp_r1 + 1
.0f26	85 05		    sta r1H
.0f28	ad 5d 0f	    lda tmp_r3
.0f2b	85 06		    sta r2L
.0f2d	ad 5e 0f	    lda tmp_r3 + 1
.0f30	85 07		    sta r2H
.0f32	20 40 0e	    jsr vertical_line
.0f35	ad 5b 0f	    lda tmp_r2
.0f38	85 02		    sta r0L
.0f3a	ad 5c 0f	    lda tmp_r2 + 1
.0f3d	85 03		    sta r0H
.0f3f	ad 59 0f	    lda tmp_r1
.0f42	85 04		    sta r1L
.0f44	ad 5a 0f	    lda tmp_r1 + 1
.0f47	85 05		    sta r1H
.0f49	ad 5d 0f	    lda tmp_r3
.0f4c	85 06		    sta r2L
.0f4e	ad 5e 0f	    lda tmp_r3 + 1
.0f51	85 07		    sta r2H
.0f53	20 40 0e	    jsr vertical_line
.0f56	60		    rts
.0f57			tmp_r0:
>0f57	00 00		    .byte $00, $00
.0f59			tmp_r1:
>0f59	00 00		    .byte $00, $00
.0f5b			tmp_r2:
>0f5b	00 00		    .byte $00, $00
.0f5d			tmp_r3:
>0f5d	00 00		    .byte $00, $00
.0f5f			div_16bit_by_8:
.0f5f	a5 02		    lda r0l             ; load x low byte
.0f61	85 0c		    sta r5l             ; store low byte in templ
.0f63	a5 03		    lda r0h             ; load x high byte
.0f65	85 0d		    sta r5h             ; store high byte in temph
.0f67	a2 03		    ldx #3              ; set loop counter to 3
.0f69			shift_loop:
.0f69	a5 0d		    lda r5h             ; load high byte
.0f6b	4a		    lsr a               ; logical shift right
.0f6c	85 0d		    sta r5h             ; store shifted high byte
.0f6e	a5 0c		    lda r5l             ; load low byte
.0f70	6a		    ror a               ; rotate right through carry (bringing in bit from high byte)
.0f71	85 0c		    sta r5l             ; store shifted low byte
.0f73	ca		    dex                 ; decrement loop counter
.0f74	d0 f3		    bne shift_loop      ; repeat 3 times
.0f76	60		    rts                 ; return from subroutine
.0f77			mult_16x16:
.0f77	64 0c		    stz r5l
.0f79	64 0d		    stz r5h
.0f7b	a5 0a		    lda r4l    ; get the multiplicand and
.0f7d	85 0c		    sta r5l    ; put it in the scratchpad.
.0f7f	a5 0b		    lda r4h
.0f81	85 0d		    sta r5h
.0f83	a9 00		    lda #$00
.0f85	85 0a		    sta r4l    ; zero-out the original multiplicand area.
.0f87	85 0b		    sta r4h
.0f89	a0 10		    ldy #$10   ; we'll loop 16 times.
.0f8b			lp1:
.0f8b	06 0a		    asl r4l    ; shift the entire 32 bits over one bit position.
.0f8d	26 0b		    rol r4h
.0f8f	26 08		    rol r3l
.0f91	26 09		    rol r3h
.0f93	90 13		    bcc lp2    ; skip the adding-in to the result if
.0f95	18		    clc        ; else, add multiplier to intermediate result.
.0f96	a5 0c		    lda r5l
.0f98	65 0a		    adc r4l
.0f9a	85 0a		    sta r4l
.0f9c	a5 0d		    lda r5h
.0f9e	65 0b		    adc r4h
.0fa0	85 0b		    sta r4h
.0fa2	a9 00		    lda #$00   ; if c=1, incr lo byte of hi cell.
.0fa4	65 08		    adc r3l
.0fa6	85 08		    sta r3l
.0fa8			lp2:
.0fa8	88		    dey        ; if we haven't done 16 iterations yet,
.0fa9	d0 e0		    bne lp1    ; then go around again.
.0fab	60		    rts

;******  Return to file: ./src/x16_demo1.asm


;******  End of listing
